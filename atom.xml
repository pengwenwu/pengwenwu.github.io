<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pena&#39;s Blog</title>
  
  <subtitle>莫道君行早，更有早行人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengwenwu.github.io/"/>
  <updated>2018-09-24T15:08:20.977Z</updated>
  <id>https://pengwenwu.github.io/</id>
  
  <author>
    <name>pengwenwu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CI框架3.x源码阅读笔记五之钩子类文件Hook.php</title>
    <link href="https://pengwenwu.github.io/2018/09/24/CI%E6%A1%86%E6%9E%B63-x%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%94%E4%B9%8B%E9%92%A9%E5%AD%90%E7%B1%BB%E6%96%87%E4%BB%B6Hook-php/"/>
    <id>https://pengwenwu.github.io/2018/09/24/CI框架3-x源码阅读笔记五之钩子类文件Hook-php/</id>
    <published>2018-09-24T15:07:57.000Z</published>
    <updated>2018-09-24T15:08:20.977Z</updated>
    
    <content type="html"><![CDATA[<p>CI框架可以实现在不修改系统核心文件的基础上来改变或增加系统的核心运行功能（如重写缓存、输出等），那就是Hooks。钩子是什么呢？可以这样理解：  </p><ol><li>钩子是一种事件驱动模式，它的核心自然是事件（CI框架中pre_system，pre_controller等都是特定的事件）</li><li>既然是事件驱动，那么必然要包含最重要的两个步骤: (1)、事件注册。对于Hook而言，就是指Hook钩子的挂载。(2).事件触发。在特定的时间点call特定的钩子，执行相应的钩子程序。</li><li>既然是事件驱动，那么也应该支持统一挂钩点的多个注册事件。</li><li>启动Hook钩子之后，程序的流程可能会发生变化，且钩子之间可能有相互调用的可能性，如果处理不当，会有死循环的可能性。同时，钩子的启用使得程序在一定程度上变得复杂，难以调试。  </li></ol><p>CI有这些挂钩点：  </p><ul><li><code>pre_system</code>： 在系统执行的早期调用，这个时候只有 <code>基准测试类</code> 和 <code>钩子类</code> 被加载了， 还没有执行到路由或其他的流程。</li><li><code>pre_controller</code>: 在你的控制器调用之前执行，所有的基础类都已加载，路由和安全检查也已经完成。</li><li><code>post_controller_constructor</code>: 在你的控制器实例化之后立即执行，控制器的任何方法都还尚未调用。</li><li><code>post_controller</code>: 在你的控制器完全运行结束时执行。</li><li><code>display_override</code>: 覆盖 _display() 方法，该方法用于在系统执行结束时向浏览器发送最终的页面结果。 这可以让你有自己的显示页面的方法。注意你可能需要使用 $this-&gt;CI =&amp; get_instance() 方法来获取 CI 超级对象，以及使用 $this-&gt;CI-&gt;output-&gt;get_output() 方法来 获取最终的显示数据。</li><li><code>cache_override</code>: 使用你自己的方法来替代 输出类 中的 _display_cache() 方法，这让你有自己的缓存显示机制。</li><li><p><code>post_system</code> 在最终的页面发送到浏览器之后、在系统的最后期被调用。</p><p>CI中钩子的核心功能是由Hook组件完成的：  </p></li><li>enabled: 钩子功能是否开启的标志。</li><li>hooks :保存系统中启用的钩子列表。</li><li>in_progress:之后我们会看到，这个标志位用于防止钩子之间的互相调用而导致的死循环。</li><li>_construct是Hook组件的构造函数，这其中调用了_initialize来完成初始化的工作。</li><li>call_hook: 调用_run_hook来call指定的钩子程序。之前CodeIgniter.php中我们已经看到，call_hook是实际提供给外部调用的接口。</li><li>_run_hook: 实际执行钩子程序的函数。</li></ul><p>使用挂钩点：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$hook[<span class="string">'pre_controller'</span>][] = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'class'</span>    =&gt; <span class="string">'MyClass'</span>, <span class="comment">// 调用的类名，这一项可以留空。</span></span><br><span class="line">    <span class="string">'function'</span> =&gt; <span class="string">'MyMethod'</span>, <span class="comment">// 调用的方法或函数的名称。</span></span><br><span class="line">    <span class="string">'filename'</span> =&gt; <span class="string">'Myclass.php'</span>, <span class="comment">// 包含你的类或函数的文件名。</span></span><br><span class="line">    <span class="string">'filepath'</span> =&gt; <span class="string">'hooks'</span>, <span class="comment">// 包含你的脚本文件的目录名。 注意： 你的脚本必须放在 application/ 目录里面，所以 filepath 是相对 application/ 目录的路径</span></span><br><span class="line">    <span class="string">'params'</span>   =&gt; <span class="keyword">array</span>(<span class="string">'beer'</span>, <span class="string">'wine'</span>, <span class="string">'snacks'</span>) <span class="comment">// 传递给你脚本的任何参数，可选。</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="组件初始化（构造函数）"><a href="#组件初始化（构造函数）" class="headerlink" title="组件初始化（构造函数）"></a>组件初始化（构造函数）</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化，获取config配置</span></span><br><span class="line">    $CFG =&amp; load_class(<span class="string">'Config'</span>, <span class="string">'core'</span>);</span><br><span class="line">    log_message(<span class="string">'info'</span>, <span class="string">'Hooks Class Initialized'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测配置是否开启钩子</span></span><br><span class="line">    <span class="keyword">if</span> ($CFG-&gt;item(<span class="string">'enable_hooks'</span>) === <span class="keyword">FALSE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取钩子配置信息</span></span><br><span class="line">    <span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'config/hooks.php'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">include</span>(APPPATH.<span class="string">'config/hooks.php'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/hooks.php'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">include</span>(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/hooks.php'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there are no hooks, we're done.</span></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>($hook) <span class="keyword">OR</span> ! is_array($hook))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;hooks =&amp; $hook;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;enabled = <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="call调用指定的钩子"><a href="#call调用指定的钩子" class="headerlink" title="call调用指定的钩子"></a>call调用指定的钩子</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">call_hook</span><span class="params">($which = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/// 检查钩子是否启用，以及call的钩子是否被预定义</span></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">$this</span>-&gt;enabled <span class="keyword">OR</span> ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hooks[$which]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查同一个挂钩点是否启用了多个钩子</span></span><br><span class="line">    <span class="keyword">if</span> (is_array(<span class="keyword">$this</span>-&gt;hooks[$which]) &amp;&amp; ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;hooks[$which][<span class="string">'function'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;hooks[$which] <span class="keyword">as</span> $val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_run_hook($val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_run_hook(<span class="keyword">$this</span>-&gt;hooks[$which]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="run执行特定的钩子程序"><a href="#run执行特定的钩子程序" class="headerlink" title="run执行特定的钩子程序"></a>run执行特定的钩子程序</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_run_hook</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// data为上述我们定义的调用方式</span></span><br><span class="line">    <span class="keyword">if</span> (is_callable($data))</span><br><span class="line">    &#123;</span><br><span class="line">        is_array($data)</span><br><span class="line">            ? $data[<span class="number">0</span>]-&gt;&#123;$data[<span class="number">1</span>]&#125;()</span><br><span class="line">            : $data();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ( ! is_array($data))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 防止重复调用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_in_progress === <span class="keyword">TRUE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置文件路径</span></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>($data[<span class="string">'filepath'</span>], $data[<span class="string">'filename'</span>]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $filepath = APPPATH.$data[<span class="string">'filepath'</span>].<span class="string">'/'</span>.$data[<span class="string">'filename'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! file_exists($filepath))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置类名和方法名</span></span><br><span class="line">    $class= <span class="keyword">empty</span>($data[<span class="string">'class'</span>]) ? <span class="keyword">FALSE</span> : $data[<span class="string">'class'</span>];</span><br><span class="line">    $function= <span class="keyword">empty</span>($data[<span class="string">'function'</span>]) ? <span class="keyword">FALSE</span> : $data[<span class="string">'function'</span>];</span><br><span class="line">    $params= <span class="keyword">isset</span>($data[<span class="string">'params'</span>]) ? $data[<span class="string">'params'</span>] : <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($function))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_in_progress = <span class="keyword">TRUE</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用方法</span></span><br><span class="line">    <span class="keyword">if</span> ($class !== <span class="keyword">FALSE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// The object is stored?</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_objects[$class]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>-&gt;_objects[$class], $function))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_objects[$class]-&gt;$function($params);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_in_progress = <span class="keyword">FALSE</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            class_exists($class, <span class="keyword">FALSE</span>) <span class="keyword">OR</span> <span class="keyword">require_once</span>($filepath);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( ! class_exists($class, <span class="keyword">FALSE</span>) <span class="keyword">OR</span> ! method_exists($class, $function))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_in_progress = <span class="keyword">FALSE</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Store the object and execute the method</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;_objects[$class] = <span class="keyword">new</span> $class();</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_objects[$class]-&gt;$function($params);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        function_exists($function) <span class="keyword">OR</span> <span class="keyword">require_once</span>($filepath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ( ! function_exists($function))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_in_progress = <span class="keyword">FALSE</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $function($params);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_in_progress = <span class="keyword">FALSE</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CI框架可以实现在不修改系统核心文件的基础上来改变或增加系统的核心运行功能（如重写缓存、输出等），那就是Hooks。钩子是什么呢？可以这样理解：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;钩子是一种事件驱动模式，它的核心自然是事件（CI框架中pre_system，pre_control
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="CodeIgniter" scheme="https://pengwenwu.github.io/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>CI框架3.x源码阅读笔记四之基准点组件Benchmark.php</title>
    <link href="https://pengwenwu.github.io/2018/09/19/CI%E6%A1%86%E6%9E%B63-x%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E5%9B%9B%E4%B9%8B%E5%9F%BA%E5%87%86%E7%82%B9%E7%BB%84%E4%BB%B6Benchmark-php/"/>
    <id>https://pengwenwu.github.io/2018/09/19/CI框架3-x源码阅读笔记四之基准点组件Benchmark-php/</id>
    <published>2018-09-19T14:56:25.000Z</published>
    <updated>2018-09-19T14:57:02.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>BenchMark，是CI的基准点组件，主要用于mark各种时间点、记录内存使用等参数，便于性能测试和追踪   </p><p>只是用来计算程序运行消耗的时间和内存</p></blockquote><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="公共属性：-marker"><a href="#公共属性：-marker" class="headerlink" title="公共属性：$marker"></a>公共属性：$marker</h3><p>只是用于所有基准标记的数组  </p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="公共方法：mark-name"><a href="#公共方法：mark-name" class="headerlink" title="公共方法：mark($name)"></a>公共方法：mark($name)</h3><p>标记当前的时间点<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">mark</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;marker[$name] = microtime(<span class="keyword">TRUE</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用流程如下：  </p><ol><li>标记一个起始点</li><li>标记一个结束点</li><li>使用elapsed_time方法计算时间差  </li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记一个起始点</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;benchmark-&gt;mark(<span class="string">'code_init'</span>);</span><br><span class="line"><span class="comment">// ... 代码主体</span></span><br><span class="line"><span class="comment">// 标记一个结束点</span></span><br><span class="line"><span class="keyword">$this</span>-&gt;benchmark-&gt;mark(<span class="string">'code_end'</span>);</span><br><span class="line"><span class="comment">// 计算时间差</span></span><br><span class="line"><span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;benchmark-&gt;elapsed_time(<span class="string">'code_start'</span>, <span class="string">'code_end'</span>);</span><br></pre></td></tr></table></figure><h3 id="公共方法：elapsed-time-point1-‘’-point2-‘’-decimals-4"><a href="#公共方法：elapsed-time-point1-‘’-point2-‘’-decimals-4" class="headerlink" title="公共方法：elapsed_time($point1 = ‘’, $point2 = ‘’, $decimals = 4)"></a>公共方法：elapsed_time($point1 = ‘’, $point2 = ‘’, $decimals = 4)</h3><p>计算两个标记点之间的时差<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">elapsed_time</span><span class="params">($point1 = <span class="string">''</span>, $point2 = <span class="string">''</span>, $decimals = <span class="number">4</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($point1 === <span class="string">''</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;elapsed_time&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;marker[$point1]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;marker[$point2]))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;marker[$point2] = microtime(<span class="keyword">TRUE</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> number_format(<span class="keyword">$this</span>-&gt;marker[$point2] - <span class="keyword">$this</span>-&gt;marker[$point1], $decimals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="memory-usage"><a href="#memory-usage" class="headerlink" title="memory_usage()"></a>memory_usage()</h3><p>显示内存占用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">memory_usage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'&#123;memory_usage&#125;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>参考链接：<a href="https://blog.csdn.net/zhihua_w/article/details/52846274" target="_blank" rel="noopener">https://blog.csdn.net/zhihua_w/article/details/52846274</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;BenchMark，是CI的基准点组件，主要用于mark各种时间点、记录内存使用等参数，便于性能测试和追踪   &lt;/p&gt;
&lt;p&gt;只是用来计算程序运行消耗的时间和内存&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;属性&quot;&gt;&lt;a href=&quot;#属
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="CodeIgniter" scheme="https://pengwenwu.github.io/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq服务端web UI配置</title>
    <link href="https://pengwenwu.github.io/2018/09/05/RabbitMq%E6%9C%8D%E5%8A%A1%E7%AB%AFweb%20UI%E9%85%8D%E7%BD%AE/"/>
    <id>https://pengwenwu.github.io/2018/09/05/RabbitMq服务端web UI配置/</id>
    <published>2018-09-05T15:18:34.000Z</published>
    <updated>2018-09-05T15:19:37.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用插件"><a href="#应用插件" class="headerlink" title="应用插件"></a>应用插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a></p><h2 id="虚拟机端口映射无法访问"><a href="#虚拟机端口映射无法访问" class="headerlink" title="虚拟机端口映射无法访问"></a>虚拟机端口映射无法访问</h2><h3 id="RabbitMQ中的访问控制（身份验证，授权）"><a href="#RabbitMQ中的访问控制（身份验证，授权）" class="headerlink" title="RabbitMQ中的访问控制（身份验证，授权）"></a>RabbitMQ中的访问控制（身份验证，授权）</h3><blockquote><p>官方文档：<a href="https://www.rabbitmq.com/access-control.html" target="_blank" rel="noopener">https://www.rabbitmq.com/access-control.html</a>  </p></blockquote><p>默认用户为<code>guest</code>，密码为<code>guest</code>。通过修改配置文件或者以下命令添加新用户：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新用户</span></span><br><span class="line">rabbitmqctl add_user root 123456</span><br><span class="line"><span class="comment"># 设置用户标签</span></span><br><span class="line">rabbitmqctl set_user_tags root administrator</span><br></pre></td></tr></table></figure></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><blockquote><p>更多用户管理命令，官方文档：<a href="https://www.rabbitmq.com/rabbitmqctl.8.html#User_Management" target="_blank" rel="noopener">https://www.rabbitmq.com/rabbitmqctl.8.html#User_Management</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应用插件&quot;&gt;&lt;a href=&quot;#应用插件&quot; class=&quot;headerlink&quot; title=&quot;应用插件&quot;&gt;&lt;/a&gt;应用插件&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="RabbitMq" scheme="https://pengwenwu.github.io/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMq客户端-php-amqplib库</title>
    <link href="https://pengwenwu.github.io/2018/09/03/RabbitMq%E5%AE%A2%E6%88%B7%E7%AB%AF-php-amqplib%E5%BA%93/"/>
    <id>https://pengwenwu.github.io/2018/09/03/RabbitMq客户端-php-amqplib库/</id>
    <published>2018-09-03T15:05:01.000Z</published>
    <updated>2018-09-03T15:05:48.962Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官网教程地址：<a href="http://www.rabbitmq.com/tutorials/tutorial-one-php.html" target="_blank" rel="noopener">http://www.rabbitmq.com/tutorials/tutorial-one-php.html</a>  </p></blockquote><h2 id="Hello-World-简单使用"><a href="#Hello-World-简单使用" class="headerlink" title="Hello World!简单使用"></a>Hello World!简单使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接使用composer加载<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require php-amqplib/php-amqplib</span><br></pre></td></tr></table></figure></p><h3 id="send发送"><a href="#send发送" class="headerlink" title="send发送"></a>send发送</h3><p>在<code>send.php</code>中包含库并使用：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br></pre></td></tr></table></figure></p><p>创建到服务器的连接：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br></pre></td></tr></table></figure></p><p>要发送，我们必须声明一个队列供我们发送; 然后我们可以向队列发布消息：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage(<span class="string">'Hello World!'</span>);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'hello'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [x] Sent 'Hello World!'\n"</span>;</span><br></pre></td></tr></table></figure></p><p>声明队列是幂等的 - 只有在它不存在的情况下才会创建它。 </p><p>关闭了频道和连接:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><blockquote><p>php send.php执行失败，可能是未安装php的<code>bcmath</code>扩展，可以用过phpize动态编译安装 </p></blockquote><h3 id="receive接收"><a href="#receive接收" class="headerlink" title="receive接收"></a>receive接收</h3><p><code>receive.php</code> </p><p>设置与send生产者相同; 我们打开一个连接和一个通道，并声明我们将要消耗的队列。请注意，这与发送的队列匹配。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;queue_declare(<span class="string">'hello'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [*] Waiting for messages. To exit press CTRL+C\n"</span>;</span><br></pre></td></tr></table></figure></p><p>定义一个<code>PHP callable</code>，它将接收服务器发送的消息。请记住，消息是从服务器异步发送到客户端的。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">' [x] Received '</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">$channel-&gt;basic_consume(<span class="string">'hello'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"><span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里通过while保证进程常驻 </p><ul><li>列出队列<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl list_queues</span><br></pre></td></tr></table></figure></li></ul><p>完整代码：<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/send.php" target="_blank" rel="noopener">send.php</a> 、 <a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/receive.php" target="_blank" rel="noopener">receive.php</a> 。<br>测试结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/hello-world-rabbitmq.png" alt="hello world" title="">                </div>                <div class="image-caption">hello world</div>            </figure> </p><h2 id="Work-queues工作队列"><a href="#Work-queues工作队列" class="headerlink" title="Work queues工作队列"></a>Work queues工作队列</h2><p>这里将创建一个工作队列，用于在多个工作人员之间分配耗时的任务。 </p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>这里将通过<code>sleep()</code>函数，模拟耗时任务。通过字符串中<code>.</code>点的个数作为其复杂性。 </p><p>稍微修改前一个示例中的send.php代码，以允许从命令行发送任意消息。重命名为<code>new_task.php</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$data = implode(<span class="string">' '</span>, array_slice($argv, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</span><br><span class="line">    $data = <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'hello'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [x] Sent '</span>, $data, <span class="string">"\n"</span>;</span><br></pre></td></tr></table></figure></p><p>旧的receive.php脚本还需要进行一些更改：它需要为消息体中的每个点伪造一秒钟的工作。它将从队列中弹出消息并执行任务，所以我们称之为<code>worker.php</code>：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">' [x] Received '</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">  sleep(substr_count($msg-&gt;body, <span class="string">'.'</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">" [x] Done\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume(<span class="string">'hello'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br></pre></td></tr></table></figure></p><h3 id="循环调度"><a href="#循环调度" class="headerlink" title="循环调度"></a>循环调度</h3><p>使用任务队列的一个优点是能够轻松地并行工作。如果我们正在积压工作积压，我们可以添加更多工人，这样就可以轻松扩展。 </p><p>打开四个控制台。三个将运行worker.php 脚本。测试结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/work-queue-rabbitmq.png" alt="worker" title="">                </div>                <div class="image-caption">worker</div>            </figure> </p><p>默认情况下，RabbitMQ将<code>按顺序</code>将每条消息发送给下一个消费者。平均而言，每个消费者将获得相同数量的消息。这种分发消息的方式称为<code>循环法</code>。 </p><h3 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h3><p>执行任务可能需要几秒钟。您可能想知道如果其中一个消费者开始执行长任务并且仅在部分完成时死亡会发生什么。使用我们当前的代码，一旦RabbitMQ向客户发送消息，它立即将其标记为删除。在这种情况下，如果你杀死一个工人，我们将丢失它刚刚处理的消息。我们还将丢失分发给这个特定工作者但尚未处理的所有消息。 </p><p>为了确保消息永不丢失，RabbitMQ支持 消息确认。消费者发回ack（nowledgement）告诉RabbitMQ已收到，处理了特定消息，RabbitMQ可以自由删除它。 </p><p>如果消费者死亡（其通道关闭，连接关闭或TCP连接丢失）而不发送确认，RabbitMQ将理解消息未完全处理并将重新排队。如果其他消费者同时在线，则会迅速将其重新发送给其他消费者。 </p><p>默认情况下，消息确认已关闭。现在是时候通过设置<code>第四个参数</code>来打开它们<code>basic_consume</code>到<code>false</code>（true表示没有ACK）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">' [x] Received '</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">  sleep(substr_count($msg-&gt;body, <span class="string">'.'</span>));</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">" [x] Done\n"</span>;</span><br><span class="line">  $msg-&gt;delivery_info[<span class="string">'channel'</span>]-&gt;basic_ack($msg-&gt;delivery_info[<span class="string">'delivery_tag'</span>]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_consume(<span class="string">'task_queue'</span>, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>被遗忘的ack</strong><br>错过ack是一个常见的错误。这是一个简单的错误，但后果是严重的。当您的客户端退出时，消息将被重新传递（这可能看起来像随机重新传递），但RabbitMQ将会占用越来越多的内存，因为它无法释放任何未经处理的消息。 </p><p> 可以使用<code>rabbitmqctl</code> 来打印<code>messages_unacknowledged</code>字段：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; sudo rabbitmqctl list_queues name messages_ready messages_unacknowledged</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote></blockquote><h3 id="消息持久性"><a href="#消息持久性" class="headerlink" title="消息持久性"></a>消息持久性</h3><p>消息确认确保即使消费者死亡，任务也不会丢失。但是如果RabbitMQ服务器停止，我们的任务仍然会丢失。 </p><p>当RabbitMQ退出或崩溃时，它将忘记队列和消息，除非你告诉它不要。确保消息不会丢失需要做两件事：我们需要<code>将队列和消息都标记为持久</code>。 </p><p>首先，我们需要确保RabbitMQ永远不会丢失我们的队列。为此，我们需要声明它是持久的。为此，我们将<code>第三个参数</code>传递给queue_declare为<code>true</code>:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ channel-&gt;queue_declare（<span class="string">'hello'</span>，<span class="keyword">false</span>，<span class="keyword">true</span>，<span class="keyword">false</span>，<span class="keyword">false</span>）;</span><br></pre></td></tr></table></figure></p><p>虽然此命令本身是正确的，但它在我们当前的设置中不起作用。那是因为我们已经定义了一个名为hello的队列 ，这个队列不耐用。RabbitMQ不允许您使用不同的参数重新定义现有队列，并将向尝试执行此操作的任何程序返回错误。但是有一个快速的解决方法 - 让我们声明一个具有不同名称的队列，例如task_queue：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;queue_declare(<span class="string">'task_queue'</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><p>此标志设置为true<code>需要应用于生产者和消费者</code>代码。 </p><p>此时我们确信即使RabbitMQ重新启动，task_queue队列也不会丢失。现在我们需要<code>将消息标记为持久性</code> - 通过设置<code>delivery_mode = 2</code>消息属性，AMQPMessage将其作为属性数组的一部分。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$msg = <span class="keyword">new</span> AMQPMessage(</span><br><span class="line">    $data,</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">'delivery_mode'</span> =&gt; AMQPMessage::DELIVERY_MODE_PERSISTENT)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="公平派遣"><a href="#公平派遣" class="headerlink" title="公平派遣"></a>公平派遣</h3><p>您可能已经注意到调度仍然无法完全按照我们的意愿运行。例如，在有两个工人的情况下，当所有奇怪的消息都很重，甚至消息很轻时，一个工人将经常忙碌而另一个工作人员几乎不会做任何工作。好吧，RabbitMQ对此一无所知，仍然会均匀地发送消息。 </p><p>发生这种情况是因为RabbitMQ只是在消息进入队列时调度消息。它不会查看消费者未确认消息的数量。它只是盲目地向第n个消费者发送每个第n个消息。 </p><p>我们可以使用<code>basic_qos</code>方法和<code>prefetch_count = 1</code>设置。这告诉RabbitMQ不要一次向一个worker发送一条消息。或者，换句话说，在处理并确认前一个消息之前，不要向worker发送新消息。相反，它会将它发送给下一个仍然不忙的worker。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;basic_qos(<span class="keyword">null</span>, <span class="number">1</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p><p>完整代码：<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/new_task.php" target="_blank" rel="noopener">new_task.php</a>，<a href="https://github.com/rabbitmq/rabbitmq-tutorials/blob/master/php/worker.php" target="_blank" rel="noopener">worker.php</a> </p><p>测试结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E5%B7%A5%E4%BD%9C%E9%98%9F%E5%88%97-%E5%85%AC%E5%B9%B3%E6%B4%BE%E9%81%A3-ranbbitmq.png" alt="公平差遣" title="">                </div>                <div class="image-caption">公平差遣</div>            </figure> </p><h2 id="Publish-Subscribe（发布-订阅）"><a href="#Publish-Subscribe（发布-订阅）" class="headerlink" title="Publish/Subscribe（发布/订阅）"></a>Publish/Subscribe（发布/订阅）</h2><p>工作队列背后的假设是每个任务都交付给一个工作者。在这一部分，我们将做一些完全不同的事情 - 我们将向多个消费者传递信息。此模式称为“发布/订阅”。 </p><h3 id="交换器"><a href="#交换器" class="headerlink" title="交换器"></a>交换器</h3><p>前面教程中的内容： </p><ul><li><code>生产者</code>是发送消息的用户的应用程序 </li><li><code>队列</code>是存储消息的缓冲器 </li><li><code>消费者</code>是接收消息的用户的应用程序 </li></ul><p>RabbitMQ中消息传递模型的<code>核心思想</code>是<code>生产者永远不会将任何消息直接发送到队列</code>。实际上，生产者通常甚至不知道消息是否会被传递到任何队列。 </p><p>相反，生产者只能向<code>交换器</code>发送消息。交换是一件非常简单的事情。一方面，它接收来自生产者的消息，另一方面将它们推送到队列。交换器必须确切知道如何处理收到的消息。它应该附加到特定队列吗？它应该附加到许多队列吗？或者它应该被丢弃。其规则由<code>交换类型</code>定义。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E4%BA%A4%E6%8D%A2%E5%99%A8.png" alt="交换器" title="">                </div>                <div class="image-caption">交换器</div>            </figure> </p><p>有几种交换类型可供选择：<code>direct（直接）</code>，<code>topic（主题）</code>，<code>headers（标题）</code>和<code>fanout（扇出）</code>。我们将专注于最后一个 - fanout扇出。让我们创建一个这种类型的交换，并将其称为日志：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;exchange_declare(<span class="string">'logs'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>列出清单</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; rabbitmqctl list_exchanges</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在此列表中将有一些amq.*交换和默认（未命名）交换。这些是默认创建的。 </p><p><strong>默认交换</strong><br>之前能发送消息，是因为我们使用的<code>默认交换</code>，通过空字符串<code>&quot;&quot;</code>来识别 </p><p>之前是这样发送消息的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $channel-&gt;basic_publish($msg, <span class="string">''</span>, <span class="string">'hello'</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>这里我们使用默认或<code>无名交换</code>：消息被路由到具有routing_key指定的名称的队列（如果存在）。路由键是basic_publish的第三个参数 </p></blockquote><h3 id="临时队列"><a href="#临时队列" class="headerlink" title="临时队列"></a>临时队列</h3><p>能够命名队列对我们来说至关重要 - 我们需要将工作人员指向同一个队列。当您想要在生产者和消费者之间共享队列时，为队列命名很重要。 </p><p>但我们的记录器并非如此。我们希望了解所有日志消息，而不仅仅是它们的一部分。我们也只对目前流动的消息感兴趣，而不是旧消息。要解决这个问题，我们需要两件事。 </p><p>首先，每当我们连接到Rabbit时，我们都需要一个新的<code>空队列</code>。为此，我们可以使用随机名称创建队列，或者更好 - 让服务器为我们选择随机队列名称。 </p><p>其次，一旦我们断开消费者，就应该自动删除队列。 </p><p>在php-amqplib客户端中，当我们将队列名称作为空字符串提供时，我们使用生成的名称创建一个非持久队列：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>);</span><br></pre></td></tr></table></figure></p><p>方法返回时，$queue_name变量包含RabbitMQ生成的随机队列名称。例如，它可能看起来像amq.gen-JzTY20BRgKO-HjmUJj0wLg。 </p><p>当声明它的连接关闭时，队列将被删除，因为它被声明为独占。 </p><h3 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E7%BB%91%E5%AE%9A-%E8%AE%A2%E9%98%85-RabbitMq.png" alt="绑定" title="">                </div>                <div class="image-caption">绑定</div>            </figure> <p>我们已经创建了一个扇出交换和一个队列。现在我们需要告诉交换机将消息发送到我们的队列。交换和队列之间的关系称为绑定。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;queue_bind($queue_name, <span class="string">'logs'</span>);</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>列出绑定</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; rabbitmqctl list_bindings</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote></blockquote><p>生成日志消息的生产者程序与前一个教程没有太大的不同。最重要的变化是我们现在想要将消息发布到我们的日志交换而不是无名交换。这里是emit_log.php脚本的代码 ：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line"></span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'logs'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">$data = implode(<span class="string">' '</span>, array_slice($argv, <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</span><br><span class="line">    $data = <span class="string">"info: Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</span><br><span class="line"></span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'logs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [x] Sent '</span>, $data, <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><p>在建立连接后我们宣布了交换。此步骤是必要的，因为禁止发布到不存在的交换 </p><p>receive_logs.php的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'logs'</span>, <span class="string">'fanout'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;queue_bind($queue_name, <span class="string">'logs'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [*] Waiting for logs. To exit press CTRL+C\n"</span>;</span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">' [x] '</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">$channel-&gt;basic_consume($queue_name, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"><span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><h2 id="Routing路由"><a href="#Routing路由" class="headerlink" title="Routing路由"></a>Routing路由</h2><p>这里我们将为其添加一个功能 - 我们将只能订阅一部分消息。例如，我们只能将关键错误消息定向到日志文件（以节省磁盘空间），同时仍然能够在控制台上打印所有日志消息。 </p><h3 id="绑定-1"><a href="#绑定-1" class="headerlink" title="绑定"></a>绑定</h3><p>之前绑定流程：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;queue_bind($queue_name, <span class="string">'logs'</span>);</span><br></pre></td></tr></table></figure></p><p>绑定是交换和队列之间的关系。这可以简单地理解为：队列对来自此交换的消息感兴趣。 </p><p>绑定可以采用额外的<code>routing_key</code>参数。为了避免与$ channel::basic_publish参数混淆，我们将其称为<code>绑定密钥</code>。这就是我们如何使用键创建绑定：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$binding_key = <span class="string">'black'</span>;</span><br><span class="line">$channel-&gt;queue_bind($queue_name, $exchange_name, $binding_key);</span><br></pre></td></tr></table></figure></p><p>绑定密钥的含义取决于交换类型。我们之前使用的扇出交换只是忽略了它的价值。 </p><h3 id="直接交换"><a href="#直接交换" class="headerlink" title="直接交换"></a>直接交换</h3><p>我们上一个教程中的日志记录系统向所有消费者广播所有消息。我们希望扩展它以允许根据消息的严重性过滤消息。例如，我们可能希望将日志消息写入磁盘的脚本仅接收严重错误，而不是在警告或信息日志消息上浪费磁盘空间。 </p><p>我们使用的是扇出交换，它没有给我们太大的灵活性 - 它只能进行无意识的广播。 </p><p>我们将使用<code>直接交换</code>。直接交换背后的路由算法很简单 - 消息进入队列，其绑定密钥与消息的路由密钥<code>完全匹配</code>。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E7%9B%B4%E6%8E%A5%E4%BA%A4%E6%8D%A2-2018-08-16_220627.png" alt="直接交换" title="">                </div>                <div class="image-caption">直接交换</div>            </figure> </p><p>在此设置中，我们可以看到直接交换X与两个绑定到它的队列。第一个队列绑定橙色绑定，第二个绑定有两个绑定，一个绑定密钥为黑色，另一个绑定为绿色。</p><p>在这样的设置中，使用路由密钥orange发布到交换机的消息 将被路由到队列Q1。路由键为黑色 或绿色的消息将转到Q2。所有其他消息将被丢弃。 </p><h3 id="多个绑定"><a href="#多个绑定" class="headerlink" title="多个绑定"></a>多个绑定</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E5%A4%9A%E4%B8%AA%E7%BB%91%E5%AE%9A-2018-08-16_220642.png" alt="多个绑定" title="">                </div>                <div class="image-caption">多个绑定</div>            </figure> <p>使用相同的绑定密钥绑定多个队列是完全合法的。在我们的例子中，我们可以在X和Q1之间添加绑定键黑色的绑定。在这种情况下，直接交换将表现得像扇出一样，并将消息广播到所有匹配的队列。路由密钥为黑色的消息将传送到  Q1和Q2。 </p><h3 id="发送日志"><a href="#发送日志" class="headerlink" title="发送日志"></a>发送日志</h3><p>我们将此模型用于我们的日志系统。我们会将消息发送给直接交换，而不是扇出。我们将提供日志严重性作为路由密钥。这样接收脚本将能够选择它想要接收的严重性。让我们首先关注发送日志。 </p><p>一如既往，我们需要先创建一个交换：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><p>我们已准备好发送消息：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'direct_logs'</span>, $severity);</span><br></pre></td></tr></table></figure></p><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><p>接收消息将像上一个教程一样工作，但有一个例外 - 我们将为我们感兴趣的每个严重性创建一个新的绑定。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($severities <span class="keyword">as</span> $severity) &#123;</span><br><span class="line">    $channel-&gt;queue_bind($queue_name, <span class="string">'direct_logs'</span>, $severity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E7%9B%B4%E6%8E%A5%E4%BA%A4%E6%8D%A2%E5%A4%9A%E4%B8%AA%E7%BB%91%E5%AE%9A2018-09-02_231850.png" alt="直接交换多个绑定" title="">                </div>                <div class="image-caption">直接交换多个绑定</div>            </figure> <p>emit_log_direct.php类的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$severity = <span class="keyword">isset</span>($argv[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>($argv[<span class="number">1</span>]) ? $argv[<span class="number">1</span>] : <span class="string">'info'</span>;</span><br><span class="line">$data = implode(<span class="string">' '</span>, array_slice($argv, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</span><br><span class="line">    $data = <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'direct_logs'</span>, $severity);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [x] Sent '</span>, $severity, <span class="string">':'</span>, $data, <span class="string">"\n"</span>;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><p>receive_logs_direct.php的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'direct_logs'</span>, <span class="string">'direct'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">$severities = array_slice($argv, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($severities)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'缺少安全级别参数'</span>, <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($severities <span class="keyword">as</span> $severity) &#123;</span><br><span class="line">    $channel-&gt;queue_bind($queue_name, <span class="string">'direct_logs'</span>, $severity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [*] Waiting for logs. To exit press CTRL+C\n"</span>;</span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">' [x] '</span>, $msg-&gt;delivery_info[<span class="string">'routing_key'</span>], <span class="string">':'</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">$channel-&gt;basic_consume($queue_name, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"><span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><p>测试结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E7%9B%B4%E6%8E%A5%E4%BA%A4%E6%8D%A2%E6%B5%8B%E8%AF%95-2018-08-16_224540.png" alt="直接绑定测试结果" title="">                </div>                <div class="image-caption">直接绑定测试结果</div>            </figure> </p><h2 id="Topics主题"><a href="#Topics主题" class="headerlink" title="Topics主题"></a>Topics主题</h2><p>虽然使用直接交换改进了我们的系统，但它仍然有局限性 - 它不能基于多个标准进行路由。 </p><p>我们需要了解更复杂的<code>主题交换</code>。 </p><h3 id="主题交换"><a href="#主题交换" class="headerlink" title="主题交换"></a>主题交换</h3><p>发送到主题交换的消息不能具有任意 routing_key - 它必须是<code>由点分隔的单词列表</code>。单词可以是任何内容，但通常它们指定与消息相关的一些功能。一些有效的路由密钥示例：”stock.usd.nyse”, “nyse.vmw”, “quick.orange.rabbit”。路由密钥中可以包含任意数量的单词，最多可达255个字节。 </p><p><code>绑定密钥也必须采用相同的形式</code>。主题交换背后的逻辑 类似于直接交换- 使用特定路由密钥发送的消息将被传递到与匹配绑定密钥绑定的所有队列。但是，绑定键有两个重要的特殊情况：  </p><ul><li>*（星号）可以替代一个单词。 </li><li>#（hash）可以替换零个或多个单词。 </li></ul><p>在一个例子中解释这个是最容易的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2_20180819164715.png" alt="主题交换" title="">                </div>                <div class="image-caption">主题交换</div>            </figure> </p><p>我们创建了三个绑定：Q1绑定了绑定键”<em> .orange.</em>“, Q2 绑定了”<em>.</em>.rabbit”和”lazy.#”。 </p><p>这些绑定可以概括为： </p><ul><li>Q1对所有橙色动物感兴趣。</li><li>Q2希望听到关于兔子的一切，以及关于懒惰动物的一切。 </li></ul><p>路由密钥设置为”quick.orange.rabbit”的消息将传递到两个队列。<br>消息”lazy.orange.elephant”也将同时发送给他们。<br>另一方面，”quick.orange.fox”只会进入第一个队列，而”lazy.brown.fox”只会进入第二个队列。<br>“lazy.pink.rabbit”将仅传递到第二个队列一次，即使它匹配两个绑定。<br>“quick.brown.fox”与任何绑定都不匹配，因此它将被丢弃。 </p><p>如果我们违反规则并发送带有一个或四个单词的消息，例如”orange”或”quick.orange.male.rabbit”，会发生什么？好吧，这些消息将不匹配任何绑定，将丢失。 </p><p>另一方面，”lazy.orange.male.rabbit”，即使它有四个单词，也会匹配最后一个绑定，并将被传递到第二个队列。 </p><blockquote><p><strong>主题交换</strong><br>主题交换功能强大，可以像其他交换器一样。 </p><p>当队列与”#”（哈希）绑定密钥绑定时 - 它将接收所有消息，而不管路由密钥 - 如扇出交换。 </p><p>当特殊字符”*”（星号）和”#”（哈希）未在绑定中使用时，主题交换的行为就像直接交换一样。 </p></blockquote><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><p>emit_log_topic.php的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Message</span>\<span class="title">AMQPMessage</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">$routing_key = <span class="keyword">isset</span>($argv[<span class="number">1</span>]) &amp;&amp; !<span class="keyword">empty</span>($argv[<span class="number">1</span>]) ? $argv[<span class="number">1</span>] : <span class="string">'anonymous.info'</span>;</span><br><span class="line">$data = implode(<span class="string">' '</span>, array_slice($argv, <span class="number">2</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($data)) &#123;</span><br><span class="line">    $data = <span class="string">"Hello World!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">$msg = <span class="keyword">new</span> AMQPMessage($data);</span><br><span class="line">$channel-&gt;basic_publish($msg, <span class="string">'topic_logs'</span>, $routing_key);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">' [x] Sent '</span>, $routing_key, <span class="string">':'</span>, $data, <span class="string">"\n"</span>;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><p>receive_logs_topic.php的代码：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpAmqpLib</span>\<span class="title">Connection</span>\<span class="title">AMQPStreamConnection</span>;</span><br><span class="line"></span><br><span class="line">$connection = <span class="keyword">new</span> AMQPStreamConnection(<span class="string">'localhost'</span>, <span class="number">5672</span>, <span class="string">'guest'</span>, <span class="string">'guest'</span>);</span><br><span class="line">$channel = $connection-&gt;channel();</span><br><span class="line">$channel-&gt;exchange_declare(<span class="string">'topic_logs'</span>, <span class="string">'topic'</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line"><span class="keyword">list</span>($queue_name, ,) = $channel-&gt;queue_declare(<span class="string">""</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">$binding_keys = array_slice($argv, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($binding_keys)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'缺少安全级别参数'</span>, <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($binding_keys <span class="keyword">as</span> $binding_key) &#123;</span><br><span class="line">    $channel-&gt;queue_bind($queue_name, <span class="string">'topic_logs'</span>, $binding_key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">" [*] Waiting for logs. To exit press CTRL+C\n"</span>;</span><br><span class="line">$callback = <span class="function"><span class="keyword">function</span> <span class="params">($msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">' [x] '</span>, $msg-&gt;delivery_info[<span class="string">'routing_key'</span>], <span class="string">':'</span>, $msg-&gt;body, <span class="string">"\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line">$channel-&gt;basic_consume($queue_name, <span class="string">''</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, $callback);</span><br><span class="line"><span class="keyword">while</span> (count($channel-&gt;callbacks)) &#123;</span><br><span class="line">    $channel-&gt;wait();</span><br><span class="line">&#125;</span><br><span class="line">$channel-&gt;close();</span><br><span class="line">$connection-&gt;close();</span><br></pre></td></tr></table></figure></p><p>测试结果如图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://pic.pwwtest.com/%E4%B8%BB%E9%A2%98%E4%BA%A4%E6%8D%A2%E6%B5%8B%E8%AF%952018-09-02_235515.png" alt="主题交换测试" title="">                </div>                <div class="image-caption">主题交换测试</div>            </figure></p><h2 id="rpc远程过程调用"><a href="#rpc远程过程调用" class="headerlink" title="rpc远程过程调用"></a>rpc远程过程调用</h2><p>目前接触不多，而且问题会比较多，暂不赘述 </p><p>了解链接：<a href="http://www.rabbitmq.com/tutorials/tutorial-six-php.html" target="_blank" rel="noopener">http://www.rabbitmq.com/tutorials/tutorial-six-php.html</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;官网教程地址：&lt;a href=&quot;http://www.rabbitmq.com/tutorials/tutorial-one-php.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.rabbitmq.
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="RabbitMq" scheme="https://pengwenwu.github.io/tags/RabbitMq/"/>
    
      <category term="php" scheme="https://pengwenwu.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>centos7安装RabbitMq服务端</title>
    <link href="https://pengwenwu.github.io/2018/09/03/centos7%E5%AE%89%E8%A3%85RabbitMq%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <id>https://pengwenwu.github.io/2018/09/03/centos7安装RabbitMq服务端/</id>
    <published>2018-09-03T15:01:38.000Z</published>
    <updated>2018-09-03T15:03:02.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><p>github地址：<a href="https://github.com/rabbitmq/erlang-rpm" target="_blank" rel="noopener">https://github.com/rabbitmq/erlang-rpm</a>  </p><p>选择不同的版本  </p><h3 id="添加仓库"><a href="#添加仓库" class="headerlink" title="添加仓库"></a>添加仓库</h3><p>比如在CentOS 7上使用Erlang 21.x：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/rabbitmq-erlang.repo</span><br><span class="line"></span><br><span class="line">[rabbitmq-erlang]</span><br><span class="line">name = rabbitmq-erlang</span><br><span class="line">baseurl = https://dl.bintray.com/rabbitmq/rpm/erlang/21/el/7</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey = https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc</span><br><span class="line">repo_gpgcheck = 0</span><br><span class="line">enabled = 1</span><br></pre></td></tr></table></figure></p><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install erlang -y</span><br></pre></td></tr></table></figure><h2 id="安装RabbitMq"><a href="#安装RabbitMq" class="headerlink" title="安装RabbitMq"></a>安装RabbitMq</h2><p>官网下载地址：<a href="http://www.rabbitmq.com/download.html" target="_blank" rel="noopener">http://www.rabbitmq.com/download.html</a>  </p><p>选择合适的版本，这里以centos为例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.bintray.com/rabbitmq/all/rabbitmq-server/3.7.7/rabbitmq-server-3.7.7-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install rabbitmq-server-3.7.7-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure></p><h3 id="rpm查看安装目录"><a href="#rpm查看安装目录" class="headerlink" title="rpm查看安装目录"></a>rpm查看安装目录</h3><ul><li><p>rpm查看安装包  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep rabbitmq</span><br></pre></td></tr></table></figure></li><li><p>rpm查看安装路径<br>  这里是<code>小写l</code>，加上刚刚查出的安装包名  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ql rabbitmq-server-3.7.7-1.el7.noarch</span><br></pre></td></tr></table></figure></li></ul><h2 id="启动rabbitmq-server"><a href="#启动rabbitmq-server" class="headerlink" title="启动rabbitmq-server"></a>启动rabbitmq-server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将rabbitmq-server加入到开机自启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service</span><br><span class="line">chkconfig rabbitmq-server on</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">service rabbitmq-server start</span><br></pre></td></tr></table></figure><h2 id="查看rabbitmq运行状态"><a href="#查看rabbitmq运行状态" class="headerlink" title="查看rabbitmq运行状态"></a>查看rabbitmq运行状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><h2 id="查看rabbitmq状态"><a href="#查看rabbitmq状态" class="headerlink" title="查看rabbitmq状态"></a>查看rabbitmq状态</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br></pre></td></tr></table></figure><h2 id="查看rabbitmq默认配置"><a href="#查看rabbitmq默认配置" class="headerlink" title="查看rabbitmq默认配置"></a>查看rabbitmq默认配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl environment</span><br></pre></td></tr></table></figure><h2 id="开启web监控"><a href="#开启web监控" class="headerlink" title="开启web监控"></a>开启web监控</h2><p>运行<code>rabbitmq-server</code>后，如果出现<code>completed with 0 plugins.</code>，则说明未开启监控。  </p><p>此时需要执行命令: <code>rabbitmq-plugins enable rabbitmq_management</code><br>再次运行rabbitmq-server  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">service rabbitmq-server start <span class="comment">#启动</span></span><br><span class="line"></span><br><span class="line">service rabbitmq-server stop <span class="comment">#停止</span></span><br><span class="line"></span><br><span class="line">service rabbitmq-server restart <span class="comment">#重启</span></span><br><span class="line"></span><br><span class="line">service rabbitmq-server status <span class="comment">#查看状态</span></span><br><span class="line"></span><br><span class="line">service rabbitmq-server etc <span class="comment">#查看有哪些命令可以使用</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装erlang&quot;&gt;&lt;a href=&quot;#安装erlang&quot; class=&quot;headerlink&quot; title=&quot;安装erlang&quot;&gt;&lt;/a&gt;安装erlang&lt;/h2&gt;&lt;p&gt;github地址：&lt;a href=&quot;https://github.com/rabbitmq/
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="RabbitMq" scheme="https://pengwenwu.github.io/tags/RabbitMq/"/>
    
  </entry>
  
  <entry>
    <title>centos7编译安装php7和nginx</title>
    <link href="https://pengwenwu.github.io/2018/07/22/centos7%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85php7%E5%92%8Cnginx/"/>
    <id>https://pengwenwu.github.io/2018/07/22/centos7编译安装php7和nginx/</id>
    <published>2018-07-22T15:56:20.000Z</published>
    <updated>2018-08-05T15:01:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="删除yum安装过的php相关模块"><a href="#删除yum安装过的php相关模块" class="headerlink" title="删除yum安装过的php相关模块"></a>删除yum安装过的php相关模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove php*</span><br></pre></td></tr></table></figure><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"></span><br><span class="line">yum -y install gcc gcc-c++ glibc</span><br><span class="line"></span><br><span class="line">yum -y install libmcrypt-devel mhash-devel libxslt-devel \</span><br><span class="line">libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel \</span><br><span class="line">zlib zlib-devel glibc glibc-devel glib2 glib2-devel bzip2 bzip2-devel \</span><br><span class="line">ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel \</span><br><span class="line">krb5 krb5-devel libidn libidn-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">wget http://cn2.php.net/distributions/php-7.2.8.tar.gz</span><br><span class="line">tar zvxf php-7.2.8.tar.gz</span><br><span class="line"><span class="built_in">cd</span> php-7.2.8</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/php7 \</span><br><span class="line">--with-config-file-path=/usr/<span class="built_in">local</span>/php7/etc \</span><br><span class="line">--with-config-file-scan-dir=/usr/<span class="built_in">local</span>/php7/etc/php.d \</span><br><span class="line">--<span class="built_in">enable</span>-mysqlnd \</span><br><span class="line">--with-mysqli \</span><br><span class="line">--with-pdo-mysql \</span><br><span class="line">--<span class="built_in">enable</span>-fpm \</span><br><span class="line">--with-fpm-user=nginx \</span><br><span class="line">--with-fpm-group=nginx \</span><br><span class="line">--with-gd \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-zlib \</span><br><span class="line">--<span class="built_in">enable</span>-xml \</span><br><span class="line">--<span class="built_in">enable</span>-shmop \</span><br><span class="line">--<span class="built_in">enable</span>-sysvsem \</span><br><span class="line">--<span class="built_in">enable</span>-inline-optimization \</span><br><span class="line">--<span class="built_in">enable</span>-mbregex \</span><br><span class="line">--<span class="built_in">enable</span>-mbstring \</span><br><span class="line">--<span class="built_in">enable</span>-ftp \</span><br><span class="line">--with-openssl \</span><br><span class="line">--<span class="built_in">enable</span>-pcntl \</span><br><span class="line">--<span class="built_in">enable</span>-sockets \</span><br><span class="line">--with-xmlrpc \</span><br><span class="line">--<span class="built_in">enable</span>-zip \</span><br><span class="line">--<span class="built_in">enable</span>-soap \</span><br><span class="line">--without-pear \</span><br><span class="line">--with-gettext \</span><br><span class="line">--<span class="built_in">enable</span>-session \</span><br><span class="line">--with-curl \</span><br><span class="line">--with-jpeg-dir \</span><br><span class="line">--with-freetype-dir \</span><br><span class="line">--<span class="built_in">enable</span>-opcache</span><br><span class="line"></span><br><span class="line">make &amp;&amp; install</span><br></pre></td></tr></table></figure><h3 id="配置php"><a href="#配置php" class="headerlink" title="配置php"></a>配置php</h3><h4 id="添加php安装目录到系统环境变量"><a href="#添加php安装目录到系统环境变量" class="headerlink" title="添加php安装目录到系统环境变量"></a>添加php安装目录到系统环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/php.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/php/bin/:/usr/<span class="built_in">local</span>/php/sbin/</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/php.sh</span><br></pre></td></tr></table></figure><h4 id="添加php配置文件"><a href="#添加php配置文件" class="headerlink" title="添加php配置文件"></a>添加php配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp php.ini-production /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br></pre></td></tr></table></figure><h4 id="修改服务器所在时区"><a href="#修改服务器所在时区" class="headerlink" title="修改服务器所在时区"></a>修改服务器所在时区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/php/etc/php.ini</span><br><span class="line"></span><br><span class="line">date.timezone = PRC</span><br></pre></td></tr></table></figure><h4 id="添加-php-fpm-配置文件"><a href="#添加-php-fpm-配置文件" class="headerlink" title="添加 php-fpm 配置文件"></a>添加 php-fpm 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/php/etc</span><br><span class="line"></span><br><span class="line">cp php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure><h4 id="添加-php-fpm-管理相关的配置文件到系统配置目录-etc-init-d"><a href="#添加-php-fpm-管理相关的配置文件到系统配置目录-etc-init-d" class="headerlink" title="添加 php-fpm 管理相关的配置文件到系统配置目录 /etc/init.d"></a>添加 php-fpm 管理相关的配置文件到系统配置目录 /etc/init.d</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/php-7.2.8</span></span><br><span class="line">cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br></pre></td></tr></table></figure><h4 id="添加-www-conf-配置文件"><a href="#添加-www-conf-配置文件" class="headerlink" title="添加 www.conf 配置文件"></a>添加 <a href="http://www.conf" target="_blank" rel="noopener">www.conf</a> 配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /usr/local/php</span></span><br><span class="line">cp etc/php-fpm.d/www.conf.default etc/php-fpm.d/www.conf</span><br></pre></td></tr></table></figure><h4 id="设置PHP日志目录和php-fpm运行进程的ID文件目录"><a href="#设置PHP日志目录和php-fpm运行进程的ID文件目录" class="headerlink" title="设置PHP日志目录和php-fpm运行进程的ID文件目录"></a>设置PHP日志目录和php-fpm运行进程的ID文件目录</h4><p>php-fpm运行进程的ID文件也就是 <code>php-fpm.pid</code>  </p><p>设置php-fpm进程目录的用户和用户组为nginx  </p><blockquote><p>-r: 添加系统用户( 这里指将要被创建的系统用户nginx )<br>-g: 指定要创建的用户所属组( 这里指添加到新系统用户nginx到nginx系统用户组 )<br>-s: 新帐户的登录shell( <code>/sbin/nologin</code> 这里设置为将要被创建系统用户nginx不能用来登录系统 )<br>-d: 新帐户的主目录( 这里指定将要被创建的系统用户nginx的家目录为 <code>/usr/local/nginx</code> )<br>-M: 不要创建用户的主目录( 也就是说将要被创建的系统用户nginx不会在 <code>/home</code> 目录下创建 <code>nginx</code> 家目录 )</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加系统用户组nginx</span></span><br><span class="line">groupadd -r nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的系统用户nginx, 并添加到系统用户组nginx, 设置不允许此用户名登录shell (如果你没有创建过系统用户nginx请创建)</span></span><br><span class="line">useradd -r -g nginx -s /sbin/nologin -d /usr/<span class="built_in">local</span>/nginx -M nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 `php-fpm` 日志目录</span></span><br><span class="line">mkdir -p /var/<span class="built_in">log</span>/php-fpm/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 `php-fpm` 进程的ID(php-fpm.pid)文件运行目录</span></span><br><span class="line">mkdir -p /var/run/php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 `php-fpm` 进程的ID(php-fpm.pid)文件运行目录的所属用户和组</span></span><br><span class="line">chown -R nginx:nginx /var/run/php-fpm/</span><br></pre></td></tr></table></figure><h4 id="设置php开机启动"><a href="#设置php开机启动" class="headerlink" title="设置php开机启动"></a>设置php开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改系统配置目录下的 `php-fpm` 文件可执行权限</span></span><br><span class="line">chmod +x /etc/init.d/php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将系统配置目录下的 `php-fpm` 添加到 `系统服务`</span></span><br><span class="line">chkconfig --add php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 `php-fpm` `系统服务` 为开机启动</span></span><br><span class="line">chkconfig php-fpm on</span><br></pre></td></tr></table></figure><h4 id="检测-php-fpm-系统服务是否启动成功"><a href="#检测-php-fpm-系统服务是否启动成功" class="headerlink" title="检测 php-fpm 系统服务是否启动成功"></a>检测 php-fpm 系统服务是否启动成功</h4><p>用 chkconfig 命令检测一下服务是否运行成功<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">chkconfig --list | grep php-fpm</span><br><span class="line"></span><br><span class="line">Note: This output shows SysV services only and does not include native</span><br><span class="line">      systemd services. SysV configuration data might be overridden by native</span><br><span class="line">      systemd configuration.</span><br><span class="line"></span><br><span class="line">      If you want to list systemd services use <span class="string">'systemctl list-unit-files'</span>.</span><br><span class="line">      To see services enabled on particular target use</span><br><span class="line">      <span class="string">'systemctl list-dependencies [target]'</span>.</span><br><span class="line"></span><br><span class="line">php-fpm         0:off   1:off   2:on    3:on    4:on    5:on    6:off</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可见服务已经在 第2 到 第5 运行等级打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 `php-fpm` 开机启动</span></span><br><span class="line">chkconfig php-fpm off</span><br></pre></td></tr></table></figure></p><h4 id="测试PHP的配置文件是否无误"><a href="#测试PHP的配置文件是否无误" class="headerlink" title="测试PHP的配置文件是否无误"></a>测试PHP的配置文件是否无误</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php-fpm -t</span><br><span class="line"></span><br><span class="line">[22-Jul-2018 11:13:23] NOTICE: configuration file /usr/<span class="built_in">local</span>/php/etc/php-fpm.conf <span class="built_in">test</span> is successful</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出现上面的提示也就是测试配置文件通过没有问题, 可以正式使用php服务了</span></span><br></pre></td></tr></table></figure><h4 id="启动php系统服务"><a href="#启动php系统服务" class="headerlink" title="启动php系统服务"></a>启动php系统服务</h4><p>使用 <code>systemctl start</code> + <code>服务名</code> 启动系统服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start php-fpm.service</span><br></pre></td></tr></table></figure></p><h4 id="查看php系统服务状态"><a href="#查看php系统服务状态" class="headerlink" title="查看php系统服务状态"></a>查看php系统服务状态</h4><p>使用 <code>systemctl status</code> + <code>服务名</code> 查看系统服务状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">systemctl status php-fpm.service</span><br><span class="line"></span><br><span class="line">● php-fpm.service - LSB: starts php-fpm</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/php-fpm; bad; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2018-07-22 11:15:47 UTC; 29s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 13309 ExecStart=/etc/rc.d/init.d/php-fpm start (code=exited, status=0/SUCCESS)</span><br><span class="line">    Tasks: 3</span><br><span class="line">   Memory: 3.2M</span><br><span class="line">   CGroup: /system.slice/php-fpm.service</span><br><span class="line">           ├─13311 php-fpm: master process (/usr/<span class="built_in">local</span>/php/etc/php-fpm.conf)</span><br><span class="line">           ├─13312 php-fpm: pool www</span><br><span class="line">           └─13313 php-fpm: pool www</span><br><span class="line"></span><br><span class="line">Jul 22 11:15:47 localhost.localdomain systemd[1]: Starting LSB: starts php-fpm...</span><br><span class="line">Jul 22 11:15:47 localhost.localdomain systemd[1]: Started LSB: starts php-fpm.</span><br><span class="line">Jul 22 11:15:47 localhost.localdomain php-fpm[13309]: Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依赖安装</span></span><br><span class="line">yum install -y pcre pcre-devel</span><br><span class="line">yum install -y openssl openssl-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://nginx.org/download/nginx-1.14.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.14.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.14.0/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx --sbin-path=/usr/<span class="built_in">local</span>/nginx/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid --with-http_ssl_module --with-http_realip_module --with-http_sub_module --with-http_gzip_static_module --with-http_stub_status_module  --with-pcre --with-cc-opt=<span class="string">"-Wno-deprecated-declarations"</span></span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export PATH=$PATH:/usr/local/nginx/nginx'</span> &gt; /etc/profile.d/nginx.sh</span><br><span class="line"></span><br><span class="line">cp /usr/<span class="built_in">local</span>/nginx/nginx /usr/bin</span><br></pre></td></tr></table></figure><h4 id="常用nginx命令"><a href="#常用nginx命令" class="headerlink" title="常用nginx命令"></a>常用nginx命令</h4><ul><li>启动<br>  nginx</li><li>nginx -s stop</li><li>nginx -s quit</li><li>nginx -s reload</li><li>nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止</li><li>nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程</li></ul><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/nginx</span><br></pre></td></tr></table></figure><p>粘贴以下命令并修改以下目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx=<span class="string">"/usr/local/nginx/nginx"</span>  </span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/usr/local/nginx/nginx.conf"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># nginx - this script starts and stops the nginx daemin</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># chkconfig:   - 85 15 </span></span><br><span class="line"><span class="comment"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \</span></span><br><span class="line"><span class="comment">#               proxy and IMAP/POP3 proxy server</span></span><br><span class="line"><span class="comment"># processname: nginx</span></span><br><span class="line"><span class="comment"># config:      /etc/nginx/nginx.conf</span></span><br><span class="line"><span class="comment"># pidfile:     /run/nginx/nginx.pid</span></span><br><span class="line"><span class="comment"># Source function library.</span></span><br><span class="line">. /etc/rc.d/init.d/<span class="built_in">functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Source networking configuration.</span></span><br><span class="line">. /etc/sysconfig/network</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that networking is up.</span></span><br><span class="line">[ <span class="string">"<span class="variable">$NETWORKING</span>"</span> = <span class="string">"no"</span> ] &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">nginx=<span class="string">"/usr/sbin/nginx"</span></span><br><span class="line"></span><br><span class="line">prog=$(basename <span class="variable">$nginx</span>)</span><br><span class="line"></span><br><span class="line">NGINX_CONF_FILE=<span class="string">"/etc/nginx/nginx.conf"</span></span><br><span class="line"></span><br><span class="line">lockfile=/var/lock/nginx.lock</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">    [ -x <span class="variable">$nginx</span> ] || <span class="built_in">exit</span> 5</span><br><span class="line">    [ -f <span class="variable">$NGINX_CONF_FILE</span> ] || <span class="built_in">exit</span> 6</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$prog</span>: "</span></span><br><span class="line">    daemon <span class="variable">$nginx</span> -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; touch <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$prog</span> -QUIT</span><br><span class="line">    retval=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">    [ <span class="variable">$retval</span> -eq 0 ] &amp;&amp; rm -f <span class="variable">$lockfile</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$retval</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    stop</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reload</span></span>() &#123;</span><br><span class="line">    configtest || <span class="built_in">return</span> $?</span><br><span class="line">    <span class="built_in">echo</span> -n $<span class="string">"Reloading <span class="variable">$prog</span>: "</span></span><br><span class="line">    killproc <span class="variable">$nginx</span> -HUP</span><br><span class="line">    RETVAL=$?</span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_reload</span></span>() &#123;</span><br><span class="line">    restart</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">configtest</span></span>() &#123;</span><br><span class="line">  <span class="variable">$nginx</span> -t -c <span class="variable">$NGINX_CONF_FILE</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status</span></span>() &#123;</span><br><span class="line">    status <span class="variable">$prog</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">rh_status_q</span></span>() &#123;</span><br><span class="line">    rh_status &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        rh_status_q &amp;&amp; <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    stop)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    restart|configtest)</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    reload)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 7</span><br><span class="line">        <span class="variable">$1</span></span><br><span class="line">        ;;</span><br><span class="line">    force-reload)</span><br><span class="line">        force_reload</span><br><span class="line">        ;;</span><br><span class="line">    status)</span><br><span class="line">        rh_status</span><br><span class="line">        ;;</span><br><span class="line">    condrestart|try-restart)</span><br><span class="line">        rh_status_q || <span class="built_in">exit</span> 0</span><br><span class="line">            ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> $<span class="string">"Usage: <span class="variable">$0</span> &#123;start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest&#125;"</span></span><br><span class="line">        <span class="built_in">exit</span> 2</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> <span class="variable">$RETVAL</span></span><br></pre></td></tr></table></figure><ul><li><p>添加到服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/init.d/nginx</span><br><span class="line">chkconfig --add nginx</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service nginx start  </span><br><span class="line">service nginx stop  </span><br><span class="line">service nginx restart  </span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;删除yum安装过的php相关模块&quot;&gt;&lt;a href=&quot;#删除yum安装过的php相关模块&quot; class=&quot;headerlink&quot; title=&quot;删除yum安装过的php相关模块&quot;&gt;&lt;/a&gt;删除yum安装过的php相关模块&lt;/h3&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="Linux" scheme="https://pengwenwu.github.io/tags/Linux/"/>
    
      <category term="nginx" scheme="https://pengwenwu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>php的几种运行模式CLI、CGI、FastCGI、mod_php</title>
    <link href="https://pengwenwu.github.io/2018/07/22/php%E7%9A%84%E5%87%A0%E7%A7%8D%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8FCLI%E3%80%81CGI%E3%80%81FastCGI%E3%80%81mod-php/"/>
    <id>https://pengwenwu.github.io/2018/07/22/php的几种运行模式CLI、CGI、FastCGI、mod-php/</id>
    <published>2018-07-22T09:37:10.000Z</published>
    <updated>2018-07-22T16:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用运行模式"><a href="#常用运行模式" class="headerlink" title="常用运行模式"></a>常用运行模式</h1><h2 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h2><p>CLI：命令行，可以在控制台或者shell中输入命令获取输出，没有header头信息   </p><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>公共网关接口（Common Gateway Interface/CGI）：是一种重要的互联网技术，可以让一个客户端，从网页浏览器向执行在网络服务器上的程序请求数据。CGI描述了服务器和请求处理程序之间传输数据的一种标准。即web server将用户请求以消息的方式转交给PHP独立进程,PHP与web服务之间无从属关系。  </p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>快速通用网关接口（Fast Common Gateway Interface／FastCGI）：是一种让交互程序与Web服务器通信的协议。FastCGI是早期通用网关接口（CGI）的增强版本。  </p><p><strong>CGI 和 FastCGI 是一种通信协议规范，不是一个实体</strong>  </p><p>CGI 程序和FastCGI程序，是指实现这两个协议的程序，可以是任何语言实现这个协议的。（PHP-CGI 和 PHP-FPM就是实现FastCGI的程序）  </p><h3 id="FastCGI和CGI的区别"><a href="#FastCGI和CGI的区别" class="headerlink" title="FastCGI和CGI的区别"></a>FastCGI和CGI的区别</h3><ul><li>CGI每接收一个请求就要fork一个进程处理，只能接收一个请求作出一个响应。请求结束后该进程就会结束。  </li><li>FastCGI会事先启动起来，作为一个cgi的管理服务器存在，预先启动一系列的子进程来等待处理，然后等待web服务器发过来的请求，一旦接受到请求就交由子进程处理，这样由于不需要在接受到请求后启动cgi，会快很多。  </li><li>FastCGI使用<code>进程/线程池</code>来处理一连串的请求。这些进程/线程由FastCGI服务器管理，而不是Web服务器。 当进来一个请求时，Web服务器把环境变量和这个页面请求通过一个Socket长连接传递给FastCGI进程。FastCGI像是一个常驻型的CGI，它可以一直执行，在请求到达时不会花费时间去fork一个进程来处理(这是CGI对位人诟病的fork-and-execute模式)。正是因为它只是一个通信协议，它还支持分布式的运算，即FastCGI程序可以在网站服务器以外的主机上执行并且接受来自其他网站服务器的请求。  </li></ul><h3 id="FastCGI整个流程"><a href="#FastCGI整个流程" class="headerlink" title="FastCGI整个流程"></a>FastCGI整个流程</h3><ol><li>Web server启动时载入FastCGI进程管理器  </li><li>FastCGI自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web server的请求  </li><li>当请求Web server时，Web server通过socket请求FastCGI进程管理器，FastCGI进程管理器选择并连接到一个CGI解释器，Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi  </li><li>FastCGI子进程处理请求完成后将标准输出和错误从同一连接返回给Web server，当FastCGI子进程结束后请求便结束。FastCGI子进程接着等待处理来自FastCGI进程管理器的下一个连接，在CGI模式中，php-cgi在此便退出了。  </li></ol><p><strong>PHP-FPM</strong>：PHP的FastCGI进程管理器  </p><h3 id="PHP-CGI-和-PHP-FPM的区别"><a href="#PHP-CGI-和-PHP-FPM的区别" class="headerlink" title="PHP-CGI 和 PHP-FPM的区别"></a>PHP-CGI 和 PHP-FPM的区别</h3><p>php-cgi与php-fpm一样，也是一个fastcgi进程管理器  </p><p>php-cgi的问题在于：  </p><ul><li>php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启  </li><li>直接杀死php-cgi进程,php就不能运行了。  </li></ul><p>PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。针对php-cgi的不足，php-fpm应运而生。  </p><p><code>PHP-FPM</code> 的管理对象是php-cgi。使用PHP-FPM来控制PHP-CGI的FastCGI进程  </p><h2 id="mod-php（传统模式）"><a href="#mod-php（传统模式）" class="headerlink" title="mod_php（传统模式）"></a>mod_php（传统模式）</h2><p>即<code>apache的php模块</code>，将PHP做为web-server的<code>子进程</code>控制,两者之间有从属关系。  </p><p>最明显的例子就是在CGI模式下,如果修改了PHP.INI的配置文件,不用重启web服务便可生效，而模块模式下则需要重启web服务。  </p><p>以mod_php模式运行PHP，意味着php是作为apache的一个模块来启动的，因此只有在apache启动的时候会读取php.ini配置文件并加载扩展模块，在apache运行期间是不会再去读取和加载扩展模块的。如果修改php的配置，需要重启apache服务  </p><h3 id="Apache的工作模式-prefork的工作原理"><a href="#Apache的工作模式-prefork的工作原理" class="headerlink" title="Apache的工作模式 prefork的工作原理"></a>Apache的工作模式 prefork的工作原理</h3><p>一个单独的控制进程(父进程)负责产生子进程，这些子进程用于监听请求并作出应答。  </p><p>Apache总是试图保持一些备用的 (spare)或是空闲的子进程用于迎接即将到来的请求。这样客户端就无需在得到服务前等候子进程的产生。  </p><p>在Unix系统中，父进程通常以root身份运行以便邦定80端口，而 Apache产生的子进程通常以一个低特权的用户运行。User和Group指令用于配置子进程的低特权用户。运行子进程的用户必须要对他所服务的内容有读取的权限，但是对服务内容之外的其他资源必须拥有尽可能少的权限。  </p><h3 id="Apache的工作模式-worker的工作原理"><a href="#Apache的工作模式-worker的工作原理" class="headerlink" title="Apache的工作模式 worker的工作原理"></a>Apache的工作模式 worker的工作原理</h3><p>每个进程能够拥有的线程数量是固定的。服务器会根据负载情况增加或减少进程数量。  </p><p>一个单独的控制进程(父进程)负责子进程的建立。每个子进程能够建立ThreadsPerChild数量的服务线程和一个监听线程，该监听线程监听接入请求并将其传递给服务线程处理和应答。  </p><p><strong>nginx默认是使用的fastcgi模式，可以配合fpm使用</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用运行模式&quot;&gt;&lt;a href=&quot;#常用运行模式&quot; class=&quot;headerlink&quot; title=&quot;常用运行模式&quot;&gt;&lt;/a&gt;常用运行模式&lt;/h1&gt;&lt;h2 id=&quot;CLI&quot;&gt;&lt;a href=&quot;#CLI&quot; class=&quot;headerlink&quot; title=&quot;CLI
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>vagrant常用命令.md</title>
    <link href="https://pengwenwu.github.io/2018/07/21/vagrant%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://pengwenwu.github.io/2018/07/21/vagrant常用命令/</id>
    <published>2018-07-21T10:30:18.000Z</published>
    <updated>2018-07-22T16:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vagrant常用命令"><a href="#Vagrant常用命令" class="headerlink" title="Vagrant常用命令"></a>Vagrant常用命令</h1><p>在安装配置中，使用了一些基础命令  </p><ul><li><code>vagrant box add</code>：添加box  </li><li><code>vagrant init</code>：初始化  </li><li><code>vagrant up</code>：启动虚拟机  </li><li><code>vagrant ssh</code>：登录虚拟机  </li><li><code>vagrant reload</code>：重新启动虚拟机  </li></ul><p>Vagrant还包括如下一些操作：  </p><ul><li><p><code>vagrant box list</code><br>  显示当前已经添加的box列表  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant box list</span><br><span class="line">base (virtualbox)</span><br></pre></td></tr></table></figure></li><li><p><code>vagrant box remove</code><br>  删除相应的box  </p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box remove base virtualbox</span><br></pre></td></tr></table></figure></li><li><p><code>vagrant destroy</code><br>  停止当前正在运行的虚拟机并销毁所有创建的资源  </p></li><li><code>vagrant halt</code><br>  关机  </li><li><code>vagrant package</code><br>  打包命令，可以把当前的运行的虚拟机环境进行打包  </li><li><code>vagrant resume</code><br>  恢复前面被挂起的状态  </li><li><code>vagrant ssh-config</code><br>  输出用于ssh连接的一些信息  </li><li><code>vagrant status</code><br>  获取当前虚拟机的状态  </li><li><code>vagrant suspend</code><br>  挂起当前的虚拟机  </li></ul><blockquote><p>参考链接：<br><a href="https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.3.md" target="_blank" rel="noopener">https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.3.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vagrant常用命令&quot;&gt;&lt;a href=&quot;#Vagrant常用命令&quot; class=&quot;headerlink&quot; title=&quot;Vagrant常用命令&quot;&gt;&lt;/a&gt;Vagrant常用命令&lt;/h1&gt;&lt;p&gt;在安装配置中，使用了一些基础命令  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;c
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="vagrant" scheme="https://pengwenwu.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>vagrant安装配置.md</title>
    <link href="https://pengwenwu.github.io/2018/07/21/vagrant%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>https://pengwenwu.github.io/2018/07/21/vagrant安装配置/</id>
    <published>2018-07-21T10:30:07.000Z</published>
    <updated>2018-07-22T16:02:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>自行下载Vagrant、VirtualBox安装  </p><p>vagrant官网地址：<a href="https://www.vagrantup.com/" target="_blank" rel="noopener">https://www.vagrantup.com/</a>  </p><p>box下载：<a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a>  </p><h1 id="Vagrant配置"><a href="#Vagrant配置" class="headerlink" title="Vagrant配置"></a>Vagrant配置</h1><h2 id="下载box"><a href="#下载box" class="headerlink" title="下载box"></a>下载box</h2><p>box提供一个操作系统环境，可以自行下载想用的基础环境，比如Ubuntu、centos、debian等  </p><h2 id="添加box"><a href="#添加box" class="headerlink" title="添加box"></a>添加box</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add base 远端的box地址或者本地的box文件名</span><br></pre></td></tr></table></figure><p><code>base</code>可以是box的自定义名称，用来标识添加的box，默认是base  </p><p>可以通过<code>vagrant list</code>查看刚刚添加的box  </p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant init Box名称</span><br></pre></td></tr></table></figure><p>如果没有指定名称为base，则需要指定初始化的Box名称。此时将会在目录下生成一个<code>Vagrantfile</code>文件  </p><h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant up</span><br></pre></td></tr></table></figure><h2 id="ssh连接到虚拟机"><a href="#ssh连接到虚拟机" class="headerlink" title="ssh连接到虚拟机"></a>ssh连接到虚拟机</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh</span><br></pre></td></tr></table></figure><h1 id="Vagrantfile配置文件详解"><a href="#Vagrantfile配置文件详解" class="headerlink" title="Vagrantfile配置文件详解"></a>Vagrantfile配置文件详解</h1><p>目录下有一个文件<code>Vagrantfile</code>，里面包含有大量的配置信息，主要包括三个方面的配置，虚拟机的配置、SSH配置、Vagrant的一些基础配置。  </p><h2 id="box设置"><a href="#box设置" class="headerlink" title="box设置"></a>box设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.box = <span class="string">"base"</span></span><br></pre></td></tr></table></figure><p>用于配置Vagrant要去启用哪个box作为系统，默认是<code>base</code>  </p><p>VirtualBox提供了VBoxManage这个命令行工具，可以让我们设定VM，用<code>modifyvm</code>这个命令让我们可以设定VM的名称和内存大小等等，这里说的名称指的是在VirtualBox中显示的名称<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">    v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"astaxie"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>这行设置的意思是调用VBoxManage的modifyvm的命令，设置VM的名称为astaxie，内存为512MB。你可以类似的通过定制其它VM属性来定制你自己的VM。</p><p>或者使用默认的配置信息修改虚拟机配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |vb|</span><br><span class="line"><span class="comment"># Display the VirtualBox GUI when booting the machine</span></span><br><span class="line"><span class="comment"># vb.gui = true</span></span><br><span class="line">  <span class="comment">#</span></span><br><span class="line"><span class="comment"># Customize the amount of memory on the VM:</span></span><br><span class="line">vb.memory = <span class="string">"1024"</span></span><br><span class="line">vb.cpus = <span class="string">"2"</span></span><br><span class="line">vb.name = <span class="string">"pww_centos7"</span></span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><h2 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h2><p>Vagrant有两种方式来进行网络连接，一种是<code>host-only(主机模式)</code>，意思是主机和虚拟机之间的网络互访，其他人访问不到你的虚拟机。另一种是<code>Bridge(桥接模式)</code>，该模式下的VM就像是局域网中的一台独立的主机，也就是说需要VM到你的路由器要IP，这样的话局域网里面其他机器就可以访问它<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># host-only</span></span><br><span class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"192.168.33.10"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Bridge</span></span><br><span class="line">config.vm.network <span class="string">"public_network"</span></span><br></pre></td></tr></table></figure></p><h2 id="hosename设置"><a href="#hosename设置" class="headerlink" title="hosename设置"></a>hosename设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.hostname = <span class="string">"go-app"</span></span><br></pre></td></tr></table></figure><p>设置hostname非常重要，因为当我们有很多台虚拟服务器的时候，都是依靠hostname來做识别的  </p><h2 id="同步目录（挂载）"><a href="#同步目录（挂载）" class="headerlink" title="同步目录（挂载）"></a>同步目录（挂载）</h2><p><code>/vagrant</code>目录默认就是当前的开发目录，这是在虚拟机开启的时候默认挂载同步的。我们还可以通过配置来设置额外的同步目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.synced_folder <span class="string">"../data"</span>, <span class="string">"/vagrant_data"</span></span><br></pre></td></tr></table></figure></p><h2 id="端口转发（映射）"><a href="#端口转发（映射）" class="headerlink" title="端口转发（映射）"></a>端口转发（映射）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.vm.network :forwarded_port, guest: 80, host: 8080</span><br></pre></td></tr></table></figure><p>把对host机器上8080端口的访问请求forward到虚拟机的80端口的服务  </p><h2 id="多台vm通信"><a href="#多台vm通信" class="headerlink" title="多台vm通信"></a>多台vm通信</h2><p>上面的配置都是针对单个服务器配置，如果是多个服务器，比如一台应用服务器，一台redis服务器，可以使用下面的配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(<span class="string">"2"</span>) <span class="keyword">do</span> |config|</span><br><span class="line">  config.vm.define :web <span class="keyword">do</span> |web|</span><br><span class="line">    web.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"web"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">    end</span><br><span class="line">    web.vm.box = <span class="string">"CentOs7"</span></span><br><span class="line">    web.vm.hostname = <span class="string">"web"</span></span><br><span class="line">    web.vm.network :private_network, ip: <span class="string">"192.168.33.10"</span></span><br><span class="line">  end</span><br><span class="line"></span><br><span class="line">  config.vm.define :redis <span class="keyword">do</span> |redis|</span><br><span class="line">    redis.vm.provider <span class="string">"virtualbox"</span> <span class="keyword">do</span> |v|</span><br><span class="line">          v.customize [<span class="string">"modifyvm"</span>, :id, <span class="string">"--name"</span>, <span class="string">"redis"</span>, <span class="string">"--memory"</span>, <span class="string">"512"</span>]</span><br><span class="line">    end</span><br><span class="line">    redis.vm.box = <span class="string">"CentOs7"</span></span><br><span class="line">    redis.vm.hostname = <span class="string">"redis"</span></span><br><span class="line">    redis.vm.network :private_network, ip: <span class="string">"192.168.33.11"</span></span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><p>也可以通过指定服务器名，ssh登录到指定服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant ssh redis</span><br></pre></td></tr></table></figure></p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ul><li>无法挂载本地目录到虚拟机，提示mount: unknown filesystem type ‘vboxsf’  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过安装vagrant-vbguest来修复</span></span><br><span class="line">vagrant plugin install vagrant-vbguest</span><br><span class="line">vagrant reload</span><br></pre></td></tr></table></figure></li></ul><p><strong>修改完配置记得用<code>vagrant reload</code>重启命令使配置生效</strong></p><blockquote><p>参考文档：<br><a href="https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.2.md" target="_blank" rel="noopener">https://github.com/astaxie/go-best-practice/blob/master/ebook/zh/01.2.md</a><br><a href="https://blog.csdn.net/hel12he/article/details/51089774" target="_blank" rel="noopener">https://blog.csdn.net/hel12he/article/details/51089774</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;自行下载Vagrant、VirtualBox安装  &lt;/p&gt;
&lt;p&gt;vagrant官网地址：&lt;a href=&quot;https://www.vag
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="vagrant" scheme="https://pengwenwu.github.io/tags/vagrant/"/>
    
  </entry>
  
  <entry>
    <title>如何保证后端接口的幂等性？</title>
    <link href="https://pengwenwu.github.io/2018/07/20/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7%EF%BC%9F/"/>
    <id>https://pengwenwu.github.io/2018/07/20/如何保证后端接口的幂等性？/</id>
    <published>2018-07-19T16:59:07.000Z</published>
    <updated>2018-07-19T17:00:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是幂等性？"><a href="#一、什么是幂等性？" class="headerlink" title="一、什么是幂等性？"></a>一、什么是幂等性？</h2><p> 一个操作，不论执行多少次，产生的效果和返回的结果都是一样的  </p><h2 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h2><ol><li>一个订单创建接口，第一次调用超时了，然后又调用了一次  </li><li>订单创建后需要去执行扣减库存等等的后续操作，第一次调用超时后又调用一次  </li><li>支付订单，已经发送过支付请求，第一次超时后又调用一次  </li><li>订单完成支付后，发送消息处理一系列后续请求，中间件消息被多个机器（分布式）或者进程执行  </li><li>对外提供接口的api如何保证幂等  </li></ol><p>这些问题都是在单体架构转成微服务架构之后，带来的问题。除了查询接口，增加、更新、删除都要保证幂等性，如何保证？  </p><h2 id="三、解决方方案"><a href="#三、解决方方案" class="headerlink" title="三、解决方方案"></a>三、解决方方案</h2><h3 id="1、-全局唯一ID"><a href="#1、-全局唯一ID" class="headerlink" title="1、 全局唯一ID"></a>1、 全局唯一ID</h3><p>根据每一次的操作和内容生成一个全局ID(guid等)，在执行操作之前判断这个唯一ID是否存在，决定是否继续执行。  </p><p>缺点：只是一种通用方案，不可能所有操作都做唯一性判读，一个是效率问题，另一个是要考虑分布式以及上下游的问题，实现起来较困难。<br>另外就是：如果是针对某张表的唯一索引，会出现重复更新的情况，所以更多的是要结合数据库字段以及状态机去实现，  </p><p>业务情景：  </p><ul><li>支付订单：生成唯一的支付凭证  </li><li>对外提供接口的api</li></ul><h3 id="2、-token机制"><a href="#2、-token机制" class="headerlink" title="2、 token机制"></a>2、 token机制</h3><p>业务情景：</p><ul><li>防止订单重复提交，创建多个订单</li></ul><p>业务要求：<br>页面数据只能被点击提交一次  </p><p>发生原因：<br>重复点击、网络重发、nginx重发等原因  </p><p>解决方法：<br>在数据提交之前，向服务端申请token，提交后后端校验token，并删除token</p><h3 id="3、-数据库字段约束"><a href="#3、-数据库字段约束" class="headerlink" title="3、 数据库字段约束"></a>3、 数据库字段约束</h3><p>业务情景：</p><ul><li>更新订单状态</li><li>库存扣减</li></ul><p>数据库字段约束主要用版本号控制，状态机约束，字段约束  </p><h4 id="字段约束主要是通过一些主键或者唯一索引去判断执行"><a href="#字段约束主要是通过一些主键或者唯一索引去判断执行" class="headerlink" title="字段约束主要是通过一些主键或者唯一索引去判断执行"></a>字段约束主要是通过一些主键或者唯一索引去判断执行</h4><p>插入：无法插入相同数据  </p><p>更新：</p><ul><li>悲观锁：<br>  select * from table_xxx where id=’xxx’ for update; </li></ul><h4 id="版本号控制"><a href="#版本号控制" class="headerlink" title="版本号控制"></a>版本号控制</h4><p>更新：  </p><ul><li><p>乐观锁：<br>  updateGoodsName(int id,String newName,int version);  </p><p>  update goods set name=#{newName},version=#{version+1} where id=#{id} and version=${version}  </p></li></ul><h4 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h4><p>设置固定的状态类型，只有同时满足该状态类型下的多个状态，才能执行  </p><p>比如： </p><p>A:订单  </p><p>待付款<br>待发货 contain 待发货<br>已发货 全部是已发货 已收货 退款 退货<br>已收货 全部已收货<br>退款中<br>退款成功<br>退款失败<br>退货中<br>退货成功<br>退货失败<br>已取消  </p><p>B:订单（不存入库状态）  </p><p>待付款<br>待发货（未确认、已确认）<br>已发货<br>已收货<br>退款中<br>退款成功<br>退款失败<br>退货中<br>退货成功<br>退货失败<br>已取消  </p><blockquote><p><strong>参考链接</strong>：<br><a href="http://825635381.iteye.com/blog/2276077" target="_blank" rel="noopener">高并发的核心技术-幂等的实现方案</a><br><a href="https://nicky-chen.github.io/distrubuted/interface-idempotency.html" target="_blank" rel="noopener">接口设计的幂等性考虑</a><br><a href="https://www.zhihu.com/question/27744795" target="_blank" rel="noopener">分布式高并发系统如何保证对外接口的幂等性？</a><br><a href="http://www.woshipm.com/pd/594751.html" target="_blank" rel="noopener">如何绘画状态机来描述业务的变化 - 人人都是产品经理</a>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、什么是幂等性？&quot;&gt;&lt;a href=&quot;#一、什么是幂等性？&quot; class=&quot;headerlink&quot; title=&quot;一、什么是幂等性？&quot;&gt;&lt;/a&gt;一、什么是幂等性？&lt;/h2&gt;&lt;p&gt; 一个操作，不论执行多少次，产生的效果和返回的结果都是一样的  &lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="分布式" scheme="https://pengwenwu.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="幂等性" scheme="https://pengwenwu.github.io/tags/%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>CI框架3.x源码阅读笔记三之全局函数库文件Common.php文件</title>
    <link href="https://pengwenwu.github.io/2018/07/18/CI%E6%A1%86%E6%9E%B63-x%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%89%E4%B9%8B%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%BA%93%E6%96%87%E4%BB%B6Common-php%E6%96%87%E4%BB%B6/"/>
    <id>https://pengwenwu.github.io/2018/07/18/CI框架3-x源码阅读笔记三之全局函数库文件Common-php文件/</id>
    <published>2018-07-18T15:44:40.000Z</published>
    <updated>2018-07-18T15:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全局函数库Common-php"><a href="#全局函数库Common-php" class="headerlink" title="全局函数库Common.php"></a>全局函数库Common.php</h1><p>Common.php文件定义了一系列的全局函数，具有最高的加载优先权  </p><p><code>function_exists()</code>的使用是为了避免重复定义</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/Common.php'</span>);</span><br></pre></td></tr></table></figure><h2 id="is-php"><a href="#is-php" class="headerlink" title="is_php()"></a>is_php()</h2><p>确定当前PHP版本是否等于或大于提供的值  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'is_php'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determines if the current version of PHP is equal to or greater than the supplied value</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>boolTRUE if the current version is $version or higher</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_php</span><span class="params">($version)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_is_php;</span><br><span class="line">$version = (string) $version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="keyword">isset</span>($_is_php[$version]))</span><br><span class="line">&#123;</span><br><span class="line">$_is_php[$version] = version_compare(PHP_VERSION, $version, <span class="string">'&gt;='</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $_is_php[$version];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="is-really-writable"><a href="#is-really-writable" class="headerlink" title="is_really_writable()"></a>is_really_writable()</h2><p>测试文件可写性  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'is_really_writable'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for file writability</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * is_writable() returns TRUE on Windows servers when you really can't write to</span></span><br><span class="line"><span class="comment"> * the file, based on the read-only attribute. is_writable() is also unreliable</span></span><br><span class="line"><span class="comment"> * on Unix servers if safe_mode is on.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>https://bugs.php.net/bug.php?id=54709</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_really_writable</span><span class="params">($file)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 兼容linux/Unix和windows系统</span></span><br><span class="line"><span class="comment">// 可以通过分隔符判断当前系统是linux，直接调用方法判断文件是否可写</span></span><br><span class="line"><span class="keyword">if</span> (DIRECTORY_SEPARATOR === <span class="string">'/'</span> &amp;&amp; (is_php(<span class="string">'5.4'</span>) <span class="keyword">OR</span> ! ini_get(<span class="string">'safe_mode'</span>)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> is_writable($file);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Windows系统</span></span><br><span class="line"><span class="keyword">if</span> (is_dir($file))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果是目录，则创建一个随机命名的文件</span></span><br><span class="line">$file = rtrim($file, <span class="string">'/'</span>).<span class="string">'/'</span>.md5(mt_rand());</span><br><span class="line"><span class="comment">// 如果文件无法创建，则返回不可写</span></span><br><span class="line"><span class="comment">// 这里fopen参数的mode多加了'b'，是强制使用二进制的意思</span></span><br><span class="line"><span class="keyword">if</span> (($fp = @fopen($file, <span class="string">'ab'</span>)) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="comment">// 删除刚才的文件</span></span><br><span class="line">@chmod($file, <span class="number">0777</span>);</span><br><span class="line">@unlink($file);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ( ! is_file($file) <span class="keyword">OR</span> ($fp = @fopen($file, <span class="string">'ab'</span>)) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 非文件或者文件无法打开</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭句柄</span></span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="amp-load-class"><a href="#amp-load-class" class="headerlink" title="&amp;load_class()"></a>&amp;load_class()</h2><p>这个函数充当单例。如果所请求的类不存在，则实例化并将其设置为静态变量。如果先前实例化了变量，则返回该变量。  </p><ul><li><code>引用返回</code>：该函数返回的是一个class实例的引用，任何对该实例的改变，都会影响下一次函数的调用结果  </li><li>也是通过内部的<code>static</code>关键字进行缓存已经加载的类的实例，实现方式类似于单例模式  </li><li>优先查找APPPATH和BASEPATH，最后才从$directory中查找类。如果存在同名类，最终加载自定义的扩展类    </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">load_class</span><span class="params">($class, $directory = <span class="string">'libraries'</span>, $param = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_classes = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前类是否存在，已存在，则返回</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_classes[$class]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> $_classes[$class];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$name = <span class="keyword">FALSE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先查找本地 application/directory 文件夹</span></span><br><span class="line"><span class="comment">// 然后是本机的 system/directory 文件夹</span></span><br><span class="line"><span class="comment">// 优先使用app自定义类</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(APPPATH, BASEPATH) <span class="keyword">as</span> $path)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file_exists($path.$directory.<span class="string">'/'</span>.$class.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$name = <span class="string">'CI_'</span>.$class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($name, <span class="keyword">FALSE</span>) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>($path.$directory.<span class="string">'/'</span>.$class.<span class="string">'.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义的拓展类是否存在，加载</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(APPPATH.$directory.<span class="string">'/'</span>.config_item(<span class="string">'subclass_prefix'</span>).$class.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$name = config_item(<span class="string">'subclass_prefix'</span>).$class;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (class_exists($name, <span class="keyword">FALSE</span>) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>(APPPATH.$directory.<span class="string">'/'</span>.$name.<span class="string">'.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 未找到该类</span></span><br><span class="line"><span class="keyword">if</span> ($name === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">Note:</span> We use exit() rather than show_error() in order to avoid a</span></span><br><span class="line"><span class="comment">// self-referencing loop with the Exceptions class</span></span><br><span class="line">set_status_header(<span class="number">503</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Unable to locate the specified class: '</span>.$class.<span class="string">'.php'</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">5</span>); <span class="comment">// EXIT_UNK_CLASS</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 记录刚刚加载过的类</span></span><br><span class="line">is_loaded($class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">$_classes[$class] = <span class="keyword">isset</span>($param)</span><br><span class="line">? <span class="keyword">new</span> $name($param)</span><br><span class="line">: <span class="keyword">new</span> $name();</span><br><span class="line"><span class="keyword">return</span> $_classes[$class];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="is-loaded"><a href="#is-loaded" class="headerlink" title="is_loaded"></a>is_loaded</h2><p>用来追踪被加载过的类  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'is_loaded'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Keeps track of which libraries have been loaded. This function is</span></span><br><span class="line"><span class="comment"> * called by the load_class() function above</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">is_loaded</span><span class="params">($class = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_is_loaded = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($class !== <span class="string">''</span>)</span><br><span class="line">&#123;</span><br><span class="line">$_is_loaded[strtolower($class)] = $class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $_is_loaded;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="get-config"><a href="#get-config" class="headerlink" title="get_config"></a>get_config</h2><p>记载主要的config.php文件  </p><p>这个函数允许我们抓取配置文件，即使是配置类还没有被实例化  </p><p><code>类型约束</code>：php5可以使用类型约束，函数的参数可以指定必须为对象（在函数原型里面指定类的名字），接口，数组（php5.1起），回调callback（php5.4起）。<br>自php7起，新增标量类型声明：字符串string，整数int，浮点数float，布尔值bool。一般不太会用到，除非是<code>依赖注入</code>的设计模式中  </p><p>需要注意的几点：</p><ul><li>函数只加载主配置文件，不会加载其他配置文件（这意味着，如果添加了其他的配置文件，在框架预备完毕之前，不会读取你的配置文件）。在Config组件实例化之前，所有读取主配置文件的工作都由该函数完成  </li><li>该函数支持动态运行的过程中修改Config.php中的条目（配置信息只可能修改一次，因为该函数也有static变量做缓存，若缓存存在，则直接返回配置）  </li><li>会同时加载environment下的配置文件，即会覆盖先前查找的config.php中相同的属性  </li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'get_config'</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the main config.php file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function lets us grab the config file even if the Config class</span></span><br><span class="line"><span class="comment"> * hasn't been instantiated yet</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>array</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">get_config</span><span class="params">(Array $replace = array<span class="params">()</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($config))</span><br><span class="line">&#123;</span><br><span class="line">$file_path = APPPATH.<span class="string">'config/config.php'</span>;</span><br><span class="line">$found = <span class="keyword">FALSE</span>;</span><br><span class="line"><span class="keyword">if</span> (file_exists($file_path))</span><br><span class="line">&#123;</span><br><span class="line">$found = <span class="keyword">TRUE</span>;</span><br><span class="line"><span class="keyword">require</span>($file_path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is the config file in the environment folder?</span></span><br><span class="line"><span class="keyword">if</span> (file_exists($file_path = APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/config.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require</span>($file_path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ( ! $found)</span><br><span class="line">&#123;</span><br><span class="line">set_status_header(<span class="number">503</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'The configuration file does not exist.'</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">3</span>); <span class="comment">// EXIT_CONFIG</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Does the $config array exist in the file?</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="keyword">isset</span>($config) <span class="keyword">OR</span> ! is_array($config))</span><br><span class="line">&#123;</span><br><span class="line">set_status_header(<span class="number">503</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Your config file does not appear to be formatted correctly.'</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">3</span>); <span class="comment">// EXIT_CONFIG</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Are any values being dynamically added or replaced?</span></span><br><span class="line"><span class="keyword">foreach</span> ($replace <span class="keyword">as</span> $key =&gt; $val)</span><br><span class="line">&#123;</span><br><span class="line">$config[$key] = $val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $config;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-item"><a href="#config-item" class="headerlink" title="config_item"></a>config_item</h2><p>获取配置数组中具体的值<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'config_item'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the specified config item</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config_item</span><span class="params">($item)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_config))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// references cannot be directly assigned to static variables, so we use an array</span></span><br><span class="line">$_config[<span class="number">0</span>] =&amp; get_config();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">isset</span>($_config[<span class="number">0</span>][$item]) ? $_config[<span class="number">0</span>][$item] : <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="get-mimes"><a href="#get-mimes" class="headerlink" title="get_mimes"></a>get_mimes</h2><p>此函数返回从配置/ mimes.php MIME类型的数组  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'get_mimes'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the MIME types array from config/mimes.php</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">get_mimes</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_mimes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_mimes))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/mimes.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$_mimes = <span class="keyword">include</span>(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/mimes.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (file_exists(APPPATH.<span class="string">'config/mimes.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$_mimes = <span class="keyword">include</span>(APPPATH.<span class="string">'config/mimes.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$_mimes = <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $_mimes;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="is-https"><a href="#is-https" class="headerlink" title="is_https"></a>is_https</h2><p>判断是佛通过加密访问<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'is_https'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Is HTTPS?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Determines if the application is accessed via an encrypted</span></span><br><span class="line"><span class="comment"> * (HTTPS) connection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_https</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( ! <span class="keyword">empty</span>($_SERVER[<span class="string">'HTTPS'</span>]) &amp;&amp; strtolower($_SERVER[<span class="string">'HTTPS'</span>]) !== <span class="string">'off'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (<span class="keyword">isset</span>($_SERVER[<span class="string">'HTTP_X_FORWARDED_PROTO'</span>]) &amp;&amp; $_SERVER[<span class="string">'HTTP_X_FORWARDED_PROTO'</span>] === <span class="string">'https'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> ( ! <span class="keyword">empty</span>($_SERVER[<span class="string">'HTTP_FRONT_END_HTTPS'</span>]) &amp;&amp; strtolower($_SERVER[<span class="string">'HTTP_FRONT_END_HTTPS'</span>]) !== <span class="string">'off'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="is-cli"><a href="#is-cli" class="headerlink" title="is_cli"></a>is_cli</h2><p>判断是否由命令行运行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'is_cli'</span>))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Is CLI?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Test to see if a request was made from the command line.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_cli</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (PHP_SAPI === <span class="string">'cli'</span> <span class="keyword">OR</span> defined(<span class="string">'STDIN'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="show-error"><a href="#show-error" class="headerlink" title="show_error"></a>show_error</h2><p>错误处理程序  </p><p>这个函数允许我们调用异常类，使用application/views/errors/error_general.php下的标准错误模板显示错误  </p><p>此函数会将错误页面直接发送到浏览器并退出<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'show_error'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Error Handler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function lets us invoke the exception class and</span></span><br><span class="line"><span class="comment"> * display errors using the standard error template located</span></span><br><span class="line"><span class="comment"> * in application/views/errors/error_general.php</span></span><br><span class="line"><span class="comment"> * This function will send the error page directly to the</span></span><br><span class="line"><span class="comment"> * browser and exit.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>int</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_error</span><span class="params">($message, $status_code = <span class="number">500</span>, $heading = <span class="string">'An Error Was Encountered'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$status_code = abs($status_code);</span><br><span class="line"><span class="keyword">if</span> ($status_code &lt; <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line">$exit_status = $status_code + <span class="number">9</span>; <span class="comment">// 9 is EXIT__AUTO_MIN</span></span><br><span class="line"><span class="keyword">if</span> ($exit_status &gt; <span class="number">125</span>) <span class="comment">// 125 is EXIT__AUTO_MAX</span></span><br><span class="line">&#123;</span><br><span class="line">$exit_status = <span class="number">1</span>; <span class="comment">// EXIT_ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$status_code = <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$exit_status = <span class="number">1</span>; <span class="comment">// EXIT_ERROR</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记载异常类，都是通过该组件去管理错误</span></span><br><span class="line">$_error =&amp; load_class(<span class="string">'Exceptions'</span>, <span class="string">'core'</span>);</span><br><span class="line"><span class="keyword">echo</span> $_error-&gt;show_error($heading, $message, <span class="string">'error_general'</span>, $status_code);</span><br><span class="line"><span class="keyword">exit</span>($exit_status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="show-404"><a href="#show-404" class="headerlink" title="show_404"></a>show_404</h2><p>展示错误页面  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'show_404'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 404 Page Handler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This function is similar to the show_error() function above</span></span><br><span class="line"><span class="comment"> * However, instead of the standard error template it displays</span></span><br><span class="line"><span class="comment"> * 404 errors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_404</span><span class="params">($page = <span class="string">''</span>, $log_error = TRUE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$_error =&amp; load_class(<span class="string">'Exceptions'</span>, <span class="string">'core'</span>);</span><br><span class="line">$_error-&gt;show_404($page, $log_error);</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">4</span>); <span class="comment">// EXIT_UNKNOWN_FILE</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="log-message"><a href="#log-message" class="headerlink" title="log_message"></a>log_message</h2><p>调用Log组件记录log信息  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'log_message'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Error Logging Interface</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * We use this as a simple mechanism to access the logging</span></span><br><span class="line"><span class="comment"> * class and send messages to be logged.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>stringthe error level: 'error', 'debug' or 'info'</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>stringthe error message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log_message</span><span class="params">($level, $message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_log === <span class="keyword">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// references cannot be directly assigned to static variables, so we use an array</span></span><br><span class="line">$_log[<span class="number">0</span>] =&amp; load_class(<span class="string">'Log'</span>, <span class="string">'core'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_log[<span class="number">0</span>]-&gt;write_log($level, $message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="set-status-header"><a href="#set-status-header" class="headerlink" title="set_status_header"></a>set_status_header</h2><p>设置http头信息  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'set_status_header'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Set HTTP Status Header</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>intthe status code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_status_header</span><span class="params">($code = <span class="number">200</span>, $text = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (is_cli())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($code) <span class="keyword">OR</span> ! is_numeric($code))</span><br><span class="line">&#123;</span><br><span class="line">show_error(<span class="string">'Status codes must be numeric'</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此函数构造一个响应头。$stati为响应码与其响应说明</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($text))</span><br><span class="line">&#123;</span><br><span class="line">is_int($code) <span class="keyword">OR</span> $code = (int) $code;</span><br><span class="line">$stati = <span class="keyword">array</span>(</span><br><span class="line"><span class="number">100</span>=&gt; <span class="string">'Continue'</span>,</span><br><span class="line"><span class="number">101</span>=&gt; <span class="string">'Switching Protocols'</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">200</span>=&gt; <span class="string">'OK'</span>,</span><br><span class="line"><span class="number">201</span>=&gt; <span class="string">'Created'</span>,</span><br><span class="line"><span class="number">202</span>=&gt; <span class="string">'Accepted'</span>,</span><br><span class="line"><span class="number">203</span>=&gt; <span class="string">'Non-Authoritative Information'</span>,</span><br><span class="line"><span class="number">204</span>=&gt; <span class="string">'No Content'</span>,</span><br><span class="line"><span class="number">205</span>=&gt; <span class="string">'Reset Content'</span>,</span><br><span class="line"><span class="number">206</span>=&gt; <span class="string">'Partial Content'</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">300</span>=&gt; <span class="string">'Multiple Choices'</span>,</span><br><span class="line"><span class="number">301</span>=&gt; <span class="string">'Moved Permanently'</span>,</span><br><span class="line"><span class="number">302</span>=&gt; <span class="string">'Found'</span>,</span><br><span class="line"><span class="number">303</span>=&gt; <span class="string">'See Other'</span>,</span><br><span class="line"><span class="number">304</span>=&gt; <span class="string">'Not Modified'</span>,</span><br><span class="line"><span class="number">305</span>=&gt; <span class="string">'Use Proxy'</span>,</span><br><span class="line"><span class="number">307</span>=&gt; <span class="string">'Temporary Redirect'</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">400</span>=&gt; <span class="string">'Bad Request'</span>,</span><br><span class="line"><span class="number">401</span>=&gt; <span class="string">'Unauthorized'</span>,</span><br><span class="line"><span class="number">402</span>=&gt; <span class="string">'Payment Required'</span>,</span><br><span class="line"><span class="number">403</span>=&gt; <span class="string">'Forbidden'</span>,</span><br><span class="line"><span class="number">404</span>=&gt; <span class="string">'Not Found'</span>,</span><br><span class="line"><span class="number">405</span>=&gt; <span class="string">'Method Not Allowed'</span>,</span><br><span class="line"><span class="number">406</span>=&gt; <span class="string">'Not Acceptable'</span>,</span><br><span class="line"><span class="number">407</span>=&gt; <span class="string">'Proxy Authentication Required'</span>,</span><br><span class="line"><span class="number">408</span>=&gt; <span class="string">'Request Timeout'</span>,</span><br><span class="line"><span class="number">409</span>=&gt; <span class="string">'Conflict'</span>,</span><br><span class="line"><span class="number">410</span>=&gt; <span class="string">'Gone'</span>,</span><br><span class="line"><span class="number">411</span>=&gt; <span class="string">'Length Required'</span>,</span><br><span class="line"><span class="number">412</span>=&gt; <span class="string">'Precondition Failed'</span>,</span><br><span class="line"><span class="number">413</span>=&gt; <span class="string">'Request Entity Too Large'</span>,</span><br><span class="line"><span class="number">414</span>=&gt; <span class="string">'Request-URI Too Long'</span>,</span><br><span class="line"><span class="number">415</span>=&gt; <span class="string">'Unsupported Media Type'</span>,</span><br><span class="line"><span class="number">416</span>=&gt; <span class="string">'Requested Range Not Satisfiable'</span>,</span><br><span class="line"><span class="number">417</span>=&gt; <span class="string">'Expectation Failed'</span>,</span><br><span class="line"><span class="number">422</span>=&gt; <span class="string">'Unprocessable Entity'</span>,</span><br><span class="line"></span><br><span class="line"><span class="number">500</span>=&gt; <span class="string">'Internal Server Error'</span>,</span><br><span class="line"><span class="number">501</span>=&gt; <span class="string">'Not Implemented'</span>,</span><br><span class="line"><span class="number">502</span>=&gt; <span class="string">'Bad Gateway'</span>,</span><br><span class="line"><span class="number">503</span>=&gt; <span class="string">'Service Unavailable'</span>,</span><br><span class="line"><span class="number">504</span>=&gt; <span class="string">'Gateway Timeout'</span>,</span><br><span class="line"><span class="number">505</span>=&gt; <span class="string">'HTTP Version Not Supported'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($stati[$code]))</span><br><span class="line">&#123;</span><br><span class="line">$text = $stati[$code];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">show_error(<span class="string">'No status text available. Please check your status code number or supply your own message text.'</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// php_sapi_name()方法可以获得PHP与服务器之间的接口类型</span></span><br><span class="line"><span class="keyword">if</span> (strpos(PHP_SAPI, <span class="string">'cgi'</span>) === <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">header(<span class="string">'Status: '</span>.$code.<span class="string">' '</span>.$text, <span class="keyword">TRUE</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$server_protocol = <span class="keyword">isset</span>($_SERVER[<span class="string">'SERVER_PROTOCOL'</span>]) ? $_SERVER[<span class="string">'SERVER_PROTOCOL'</span>] : <span class="string">'HTTP/1.1'</span>;</span><br><span class="line">header($server_protocol.<span class="string">' '</span>.$code.<span class="string">' '</span>.$text, <span class="keyword">TRUE</span>, $code);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="error-handler、-exception-handler、-shutdown-handler"><a href="#error-handler、-exception-handler、-shutdown-handler" class="headerlink" title="_error_handler、_exception_handler、_shutdown_handler"></a>_error_handler、_exception_handler、_shutdown_handler</h2><p>错误处理机制  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'_error_handler'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Error Handler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This is the custom error handler that is declared at the (relative)</span></span><br><span class="line"><span class="comment"> * top of CodeIgniter.php. The main reason we use this is to permit</span></span><br><span class="line"><span class="comment"> * PHP errors to be logged in our own log files since the user may</span></span><br><span class="line"><span class="comment"> * not have access to server logs. Since this function effectively</span></span><br><span class="line"><span class="comment"> * intercepts PHP errors, however, we also need to display errors</span></span><br><span class="line"><span class="comment"> * based on the current error_reporting level.</span></span><br><span class="line"><span class="comment"> * We do that with the use of a PHP error template.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>int$severity</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string$message</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string$filepath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>int$line</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>void</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_error_handler</span><span class="params">($severity, $message, $filepath, $line)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$is_error = (((E_ERROR | E_COMPILE_ERROR | E_CORE_ERROR | E_USER_ERROR) &amp; $severity) === $severity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// When an error occurred, set the status header to '500 Internal Server Error'</span></span><br><span class="line"><span class="comment">// to indicate to the client something went wrong.</span></span><br><span class="line"><span class="comment">// This can't be done within the $_error-&gt;show_php_error method because</span></span><br><span class="line"><span class="comment">// it is only called when the display_errors flag is set (which isn't usually</span></span><br><span class="line"><span class="comment">// the case in a production environment) or when errors are ignored because</span></span><br><span class="line"><span class="comment">// they are above the error_reporting threshold.</span></span><br><span class="line"><span class="keyword">if</span> ($is_error)</span><br><span class="line">&#123;</span><br><span class="line">set_status_header(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should we ignore the error? We'll get the current error_reporting</span></span><br><span class="line"><span class="comment">// level and add its bits with the severity bits to find out.</span></span><br><span class="line"><span class="keyword">if</span> (($severity &amp; error_reporting()) !== $severity)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$_error =&amp; load_class(<span class="string">'Exceptions'</span>, <span class="string">'core'</span>);</span><br><span class="line">$_error-&gt;log_exception($severity, $message, $filepath, $line);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Should we display the error?</span></span><br><span class="line"><span class="keyword">if</span> (str_ireplace(<span class="keyword">array</span>(<span class="string">'off'</span>, <span class="string">'none'</span>, <span class="string">'no'</span>, <span class="string">'false'</span>, <span class="string">'null'</span>), <span class="string">''</span>, ini_get(<span class="string">'display_errors'</span>)))</span><br><span class="line">&#123;</span><br><span class="line">$_error-&gt;show_php_error($severity, $message, $filepath, $line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the error is fatal, the execution of the script should be stopped because</span></span><br><span class="line"><span class="comment">// errors can't be recovered from. Halting the script conforms with PHP's</span></span><br><span class="line"><span class="comment">// default error handling. See http://www.php.net/manual/en/errorfunc.constants.php</span></span><br><span class="line"><span class="keyword">if</span> ($is_error)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>); <span class="comment">// EXIT_ERROR</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="remove-invisible-characters"><a href="#remove-invisible-characters" class="headerlink" title="remove_invisible_characters"></a>remove_invisible_characters</h2><p>删除不可见字符  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'remove_invisible_characters'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove Invisible Characters</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This prevents sandwiching null characters</span></span><br><span class="line"><span class="comment"> * between ascii characters, like Java\0script.</span></span><br><span class="line"><span class="comment"> * 这可以防止夹空字符之间的ASCII字符，如java \ 0scrip</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove_invisible_characters</span><span class="params">($str, $url_encoded = TRUE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$non_displayables = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// every control character except newline (dec 10),</span></span><br><span class="line"><span class="comment">// carriage return (dec 13) and horizontal tab (dec 09)</span></span><br><span class="line"><span class="keyword">if</span> ($url_encoded)</span><br><span class="line">&#123;</span><br><span class="line">$non_displayables[] = <span class="string">'/%0[0-8bcef]/'</span>;<span class="comment">// url encoded 00-08, 11, 12, 14, 15</span></span><br><span class="line">$non_displayables[] = <span class="string">'/%1[0-9a-f]/'</span>;<span class="comment">// url encoded 16-31</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$non_displayables[] = <span class="string">'/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]+/S'</span>;<span class="comment">// 00-08, 11, 12, 14-31, 127</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">$str = preg_replace($non_displayables, <span class="string">''</span>, $str, <span class="number">-1</span>, $count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ($count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="html-escape"><a href="#html-escape" class="headerlink" title="html_escape"></a>html_escape</h2><p>返回HTML转义变量  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'html_escape'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns HTML escaped variable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>mixed$varThe input string or array of strings to be escaped.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>bool$double_encode$double_encode set to FALSE prevents escaping twice.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>mixedThe escaped string or array of strings as a result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">html_escape</span><span class="params">($var, $double_encode = TRUE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($var))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> $var;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_array($var))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> array_map(<span class="string">'html_escape'</span>, $var, array_fill(<span class="number">0</span>, count($var), $double_encode));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> htmlspecialchars($var, ENT_QUOTES, config_item(<span class="string">'charset'</span>), $double_encode);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="stringify-attributes"><a href="#stringify-attributes" class="headerlink" title="_stringify_attributes"></a>_stringify_attributes</h2><p>在HTML标签中使用Stringify属性  </p><p>用于转换字符串、数组或对象的辅助函数的字符串的属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'_stringify_attributes'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Stringify attributes for use in HTML tags.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Helper function used to convert a string, array, or object</span></span><br><span class="line"><span class="comment"> * of attributes to a string.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>mixedstring, array, object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>bool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_stringify_attributes</span><span class="params">($attributes, $js = FALSE)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">$atts = <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($attributes))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> $atts;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_string($attributes))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">' '</span>.$attributes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$attributes = (<span class="keyword">array</span>) $attributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($attributes <span class="keyword">as</span> $key =&gt; $val)</span><br><span class="line">&#123;</span><br><span class="line">$atts .= ($js) ? $key.<span class="string">'='</span>.$val.<span class="string">','</span> : <span class="string">' '</span>.$key.<span class="string">'="'</span>.$val.<span class="string">'"'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> rtrim($atts, <span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="function-usable"><a href="#function-usable" class="headerlink" title="function_usable"></a>function_usable</h2><p>函数可用  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! function_exists(<span class="string">'function_usable'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function usable</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span>http://www.hardened-php.net/suhosin/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>string$function_nameFunction to check for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>boolTRUE if the function exists and is safe to call,</span></span><br><span class="line"><span class="comment"> *FALSE otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">function_usable</span><span class="params">($function_name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> $_suhosin_func_blacklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (function_exists($function_name))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( ! <span class="keyword">isset</span>($_suhosin_func_blacklist))</span><br><span class="line">&#123;</span><br><span class="line">$_suhosin_func_blacklist = extension_loaded(<span class="string">'suhosin'</span>)</span><br><span class="line">? explode(<span class="string">','</span>, trim(ini_get(<span class="string">'suhosin.executor.func.blacklist'</span>)))</span><br><span class="line">: <span class="keyword">array</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ! in_array($function_name, $_suhosin_func_blacklist, <span class="keyword">TRUE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;全局函数库Common-php&quot;&gt;&lt;a href=&quot;#全局函数库Common-php&quot; class=&quot;headerlink&quot; title=&quot;全局函数库Common.php&quot;&gt;&lt;/a&gt;全局函数库Common.php&lt;/h1&gt;&lt;p&gt;Common.php文件定义了一系列
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="CodeIgniter" scheme="https://pengwenwu.github.io/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>CI框架3.x源码阅读笔记二之核心文件CodeIgniter.php</title>
    <link href="https://pengwenwu.github.io/2018/07/13/CI%E6%A1%86%E6%9E%B63-x%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%BA%8C%E4%B9%8B%E6%A0%B8%E5%BF%83%E6%96%87%E4%BB%B6CodeIgniter-php/"/>
    <id>https://pengwenwu.github.io/2018/07/13/CI框架3-x源码阅读笔记二之核心文件CodeIgniter-php/</id>
    <published>2018-07-12T16:14:42.000Z</published>
    <updated>2018-07-12T16:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心文件CodeIgniter-php"><a href="#核心文件CodeIgniter-php" class="headerlink" title="核心文件CodeIgniter.php"></a>核心文件CodeIgniter.php</h1><p>文件地址: system/core/CodeIgniter.php  </p><h2 id="加载框架常量、函数库以及框架初始化"><a href="#加载框架常量、函数库以及框架初始化" class="headerlink" title="加载框架常量、函数库以及框架初始化"></a>加载框架常量、函数库以及框架初始化</h2><h3 id="加载框架常量constants-php文件"><a href="#加载框架常量constants-php文件" class="headerlink" title="加载框架常量constants.php文件"></a>加载框架常量constants.php文件</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/constants.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(APPPATH.<span class="string">'config/'</span>.ENVIRONMENT.<span class="string">'/constants.php'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(APPPATH.<span class="string">'config/constants.php'</span>);</span><br></pre></td></tr></table></figure><p>通过<code>ENVIRONMENT</code>常量去加载不同目录的constants.php，内容主要是一些<code>常量的定义</code>  </p><h3 id="加载全局函数库Common-php"><a href="#加载全局函数库Common-php" class="headerlink" title="加载全局函数库Common.php"></a>加载全局函数库Common.php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/Common.php'</span>);</span><br></pre></td></tr></table></figure><h3 id="进行全局变量安全处理"><a href="#进行全局变量安全处理" class="headerlink" title="进行全局变量安全处理"></a>进行全局变量安全处理</h3><p>如果低于php5.4版本，将进行全局变量安全处理。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! is_php(<span class="string">'5.4'</span>))</span><br><span class="line">&#123;</span><br><span class="line">ini_set(<span class="string">'magic_quotes_runtime'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((bool) ini_get(<span class="string">'register_globals'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$_protected = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">'_SERVER'</span>,</span><br><span class="line"><span class="string">'_GET'</span>,</span><br><span class="line"><span class="string">'_POST'</span>,</span><br><span class="line"><span class="string">'_FILES'</span>,</span><br><span class="line"><span class="string">'_REQUEST'</span>,</span><br><span class="line"><span class="string">'_SESSION'</span>,</span><br><span class="line"><span class="string">'_ENV'</span>,</span><br><span class="line"><span class="string">'_COOKIE'</span>,</span><br><span class="line"><span class="string">'GLOBALS'</span>,</span><br><span class="line"><span class="string">'HTTP_RAW_POST_DATA'</span>,</span><br><span class="line"><span class="string">'system_path'</span>,</span><br><span class="line"><span class="string">'application_folder'</span>,</span><br><span class="line"><span class="string">'view_folder'</span>,</span><br><span class="line"><span class="string">'_protected'</span>,</span><br><span class="line"><span class="string">'_registered'</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$_registered = ini_get(<span class="string">'variables_order'</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">array</span>(<span class="string">'E'</span> =&gt; <span class="string">'_ENV'</span>, <span class="string">'G'</span> =&gt; <span class="string">'_GET'</span>, <span class="string">'P'</span> =&gt; <span class="string">'_POST'</span>, <span class="string">'C'</span> =&gt; <span class="string">'_COOKIE'</span>, <span class="string">'S'</span> =&gt; <span class="string">'_SERVER'</span>) <span class="keyword">as</span> $key =&gt; $superglobal)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (strpos($_registered, $key) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (array_keys($$superglobal) <span class="keyword">as</span> $var)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($GLOBALS[$var]) &amp;&amp; ! in_array($var, $_protected, <span class="keyword">TRUE</span>))</span><br><span class="line">&#123;</span><br><span class="line">$GLOBALS[$var] = <span class="keyword">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误、异常和程序完成的函数"><a href="#自定义错误、异常和程序完成的函数" class="headerlink" title="自定义错误、异常和程序完成的函数"></a>自定义错误、异常和程序完成的函数</h3><p>定义一个自定义错误处理程序，以便记录PHP错误</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_error_handler(<span class="string">'_error_handler'</span>);</span><br><span class="line">set_exception_handler(<span class="string">'_exception_handler'</span>);</span><br><span class="line">register_shutdown_function(<span class="string">'_shutdown_handler'</span>);</span><br></pre></td></tr></table></figure><h3 id="检查核心class是否被扩展"><a href="#检查核心class是否被扩展" class="headerlink" title="检查核心class是否被扩展"></a>检查核心class是否被扩展</h3><p><code>$assign_to_config</code>是定义在入口文件Index.php中的配置数组，被注释掉了。  </p><p>这里的<code>subclass_prefix</code>配置默认项是在APPPATH/Config/config.php目录。  </p><p>即index.php文件中的<code>subclass_prefix</code>配置项具有优先权，会覆盖config中的配置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>($assign_to_config[<span class="string">'subclass_prefix'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 这里的get_config是全局函数，主要用于新增或替换原有配置</span></span><br><span class="line">get_config(<span class="keyword">array</span>(<span class="string">'subclass_prefix'</span> =&gt; $assign_to_config[<span class="string">'subclass_prefix'</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载composer"><a href="#加载composer" class="headerlink" title="加载composer"></a>加载composer</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($composer_autoload = config_item(<span class="string">'composer_autoload'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ($composer_autoload === <span class="keyword">TRUE</span>)</span><br><span class="line">&#123;</span><br><span class="line">file_exists(APPPATH.<span class="string">'vendor/autoload.php'</span>)</span><br><span class="line">? <span class="keyword">require_once</span>(APPPATH.<span class="string">'vendor/autoload.php'</span>)</span><br><span class="line">: log_message(<span class="string">'error'</span>, <span class="string">'$config[\'composer_autoload\'] is set to TRUE but '</span>.APPPATH.<span class="string">'vendor/autoload.php was not found.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (file_exists($composer_autoload))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>($composer_autoload);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">log_message(<span class="string">'error'</span>, <span class="string">'Could not find the specified $config[\'composer_autoload\'] path: '</span>.$composer_autoload);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="加载核心类组件"><a href="#加载核心类组件" class="headerlink" title="加载核心类组件"></a>加载核心类组件</h2><h3 id="BenchMark-gt-BM"><a href="#BenchMark-gt-BM" class="headerlink" title="BenchMark-&gt;BM"></a>BenchMark-&gt;BM</h3><p>指BenchMark，是CI的基准点组件，主要用于mark各种时间点、记录内存使用等参数，便于性能测试和追踪  </p><p>只是用来计算程序运行消耗的时间和内存  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$BM =&amp; load_class(<span class="string">'Benchmark'</span>, <span class="string">'core'</span>);</span><br><span class="line">$BM-&gt;mark(<span class="string">'total_execution_time_start'</span>);</span><br><span class="line">$BM-&gt;mark(<span class="string">'loading_time:_base_classes_start'</span>);</span><br></pre></td></tr></table></figure><h3 id="钩子类-gt-EXT"><a href="#钩子类-gt-EXT" class="headerlink" title="钩子类-&gt;EXT"></a>钩子类-&gt;EXT</h3><p>Hooks钩子类 - 提供一种机制来扩展基本系统而不进行黑客攻击。</p><p>用于在不改变CI核心的基础上改变或者增加系统的核心运行功能。Hook钩子允许你在系统运行的各个挂钩点（hook point）添加自定义的功能和跟踪，如pre_system，pre_controller，post_controller等预定义的挂钩点。以下所有的$EXT-&gt;_call_hook(“xxx”); 均是call特定挂钩点的程序（如果有的话）。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *  Instantiate the hooks class</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$EXT =&amp; load_class(<span class="string">'Hooks'</span>, <span class="string">'core'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *  Is there a "pre_system" hook?</span></span><br><span class="line"><span class="comment"> * ------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">$EXT-&gt;call_hook(<span class="string">'pre_system'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="配置类-gt-CFG"><a href="#配置类-gt-CFG" class="headerlink" title="配置类-&gt;CFG"></a>配置类-&gt;CFG</h3><p>Config配置管理组件。主要用于加载配置文件、获取和设置配置项等<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$CFG =&amp; load_class(<span class="string">'Config'</span>, <span class="string">'core'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do we have any manually set config items in the index.php file?</span></span><br><span class="line"><span class="comment">// 上文提到过，在index.php入口文件中，配置项具有优先权，会替换替他文件内的配置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($assign_to_config) &amp;&amp; is_array($assign_to_config))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">foreach</span> ($assign_to_config <span class="keyword">as</span> $key =&gt; $value)</span><br><span class="line">&#123;</span><br><span class="line">$CFG-&gt;set_item($key, $value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="字符集设置相关扩展开启"><a href="#字符集设置相关扩展开启" class="headerlink" title="字符集设置相关扩展开启"></a>字符集设置相关扩展开启</h3><p>bool extension_loaded ( string $name )<br>检查一个扩展是否已经加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取配置项里的charset字符集配置</span></span><br><span class="line"><span class="comment">// config类的构造函数，会去获取APP应用目录下的配置</span></span><br><span class="line">$charset = strtoupper(config_item(<span class="string">'charset'</span>));</span><br><span class="line">ini_set(<span class="string">'default_charset'</span>, $charset);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查mbstring扩展项是否开启</span></span><br><span class="line"><span class="keyword">if</span> (extension_loaded(<span class="string">'mbstring'</span>))</span><br><span class="line">&#123;</span><br><span class="line">define(<span class="string">'MB_ENABLED'</span>, <span class="keyword">TRUE</span>);</span><br><span class="line"><span class="comment">// mbstring.internal_encoding is deprecated starting with PHP 5.6</span></span><br><span class="line"><span class="comment">// and it's usage triggers E_DEPRECATED messages.</span></span><br><span class="line">@ini_set(<span class="string">'mbstring.internal_encoding'</span>, $charset);</span><br><span class="line"><span class="comment">// This is required for mb_convert_encoding() to strip invalid characters.</span></span><br><span class="line"><span class="comment">// That's utilized by CI_Utf8, but it's also done for consistency with iconv.</span></span><br><span class="line">mb_substitute_character(<span class="string">'none'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">define(<span class="string">'MB_ENABLED'</span>, <span class="keyword">FALSE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启字符集转换扩展</span></span><br><span class="line"><span class="comment">// There's an ICONV_IMPL constant, but the PHP manual says that using</span></span><br><span class="line"><span class="comment">// iconv's predefined constants is "strongly discouraged".</span></span><br><span class="line"><span class="keyword">if</span> (extension_loaded(<span class="string">'iconv'</span>))</span><br><span class="line">&#123;</span><br><span class="line">define(<span class="string">'ICONV_ENABLED'</span>, <span class="keyword">TRUE</span>);</span><br><span class="line"><span class="comment">// iconv.internal_encoding is deprecated starting with PHP 5.6</span></span><br><span class="line"><span class="comment">// and it's usage triggers E_DEPRECATED messages.</span></span><br><span class="line">@ini_set(<span class="string">'iconv.internal_encoding'</span>, $charset);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">define(<span class="string">'ICONV_ENABLED'</span>, <span class="keyword">FALSE</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内部编码</span></span><br><span class="line"><span class="keyword">if</span> (is_php(<span class="string">'5.6'</span>))</span><br><span class="line">&#123;</span><br><span class="line">ini_set(<span class="string">'php.internal_encoding'</span>, $charset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载兼容性特性包"><a href="#加载兼容性特性包" class="headerlink" title="加载兼容性特性包"></a>加载兼容性特性包</h3><p><code>重写</code>系统组件的一些方法  </p><ul><li><p>mbstring<br>  mb_strlen - 字符串长度<br>  mb_strpos - 字符串查找<br>  mb_substr - 字符串截取  </p></li><li><p>hash<br>  hash - 生成哈希值<br>  hash_equals - 可防止时序攻击的字符串比较<br>  hash_pbkdf2 - 生成所提供密码的 PBKDF2 密钥导出  </p></li><li><p>password<br>  password_hash - 创建密码的散列，兼容<code>crypt()</code>，PHP7.0.0后已废弃<code>salt</code><br>  password_get_info - 返回指定散列（hash）的相关信息<br>  password_needs_rehash - 检测散列值是否匹配指定的选项<br>  password_verify - 验证密码是否和散列值匹配</p></li><li><p>standard<br>  array_column - 返回数组中指定的一列<br>  hex2bin - 转换十六进制字符串为二进制字符串<br>  array_replace - 使用传递的数组替换第一个数组的元素<br>  array_replace_recursive - 使用传递的数组递归替换第一个数组的元素<br>  quoted_printable_encode - 将 8-bit 字符串转换成 quoted-printable 字符串  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 中文字符串处理</span></span><br><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/compat/mbstring.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// hash处理</span></span><br><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/compat/hash.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密兼容处理</span></span><br><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/compat/password.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标准兼容处理</span></span><br><span class="line"><span class="keyword">require_once</span>(BASEPATH.<span class="string">'core/compat/standard.php'</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Utf8类-gt-UNI"><a href="#Utf8类-gt-UNI" class="headerlink" title="Utf8类-&gt;UNI"></a>Utf8类-&gt;UNI</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$UNI =&amp; load_class(<span class="string">'Utf8'</span>, <span class="string">'core'</span>);</span><br></pre></td></tr></table></figure><h3 id="URI类"><a href="#URI类" class="headerlink" title="URI类"></a>URI类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$URI =&amp; load_class(<span class="string">'URI'</span>, <span class="string">'core'</span>);</span><br></pre></td></tr></table></figure><h3 id="路由类-gt-RTR"><a href="#路由类-gt-RTR" class="headerlink" title="路由类-&gt;RTR"></a>路由类-&gt;RTR</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$RTR =&amp; load_class(<span class="string">'Router'</span>, <span class="string">'core'</span>, <span class="keyword">isset</span>($routing) ? $routing : <span class="keyword">NULL</span>);</span><br></pre></td></tr></table></figure><h3 id="OUTPUT类-gt-OUT"><a href="#OUTPUT类-gt-OUT" class="headerlink" title="OUTPUT类-&gt;OUT"></a>OUTPUT类-&gt;OUT</h3><p>最终输出管理组件<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$OUT =&amp; load_class(<span class="string">'Output'</span>, <span class="string">'core'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否有有效的缓存文件，有的话执行结束</span></span><br><span class="line"><span class="keyword">if</span> ($EXT-&gt;call_hook(<span class="string">'cache_override'</span>) === <span class="keyword">FALSE</span> &amp;&amp; $OUT-&gt;_display_cache($CFG, $URI) === <span class="keyword">TRUE</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安全类-gt-SEC"><a href="#安全类-gt-SEC" class="headerlink" title="安全类-&gt;SEC"></a>安全类-&gt;SEC</h3><p>为xss和csrf支持加载安全类<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$SEC =&amp; load_class(<span class="string">'Security'</span>, <span class="string">'core'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="输入及过滤类-gt-IN"><a href="#输入及过滤类-gt-IN" class="headerlink" title="输入及过滤类-&gt;IN"></a>输入及过滤类-&gt;IN</h3><p>用于获取输入以及表单验证<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$IN=&amp; load_class(<span class="string">'Input'</span>, <span class="string">'core'</span>);</span><br></pre></td></tr></table></figure></p><h3 id="语言类-gt-LANG"><a href="#语言类-gt-LANG" class="headerlink" title="语言类-&gt;LANG"></a>语言类-&gt;LANG</h3><p>用于设置框架语言<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$LANG =&amp; load_class(<span class="string">'Lang'</span>, <span class="string">'core'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="加载app应用控制器和本地system控制器"><a href="#加载app应用控制器和本地system控制器" class="headerlink" title="加载app应用控制器和本地system控制器"></a>加载app应用控制器和本地system控制器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 加载本地system原始控制器</span></span><br><span class="line"><span class="comment">// 这里没有用load_class()；的原因是我们最终并不会直接使用该基类，都是针对继承后新的类</span></span><br><span class="line"><span class="keyword">require_once</span> BASEPATH.<span class="string">'core/Controller.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义get_instance();方法，通过调用CI_Controller::get_instance()可以实现单例化</span></span><br><span class="line"><span class="comment">* 调用此函数可方便以后直接取得当前应用控制器</span></span><br><span class="line"><span class="comment">* Reference to the CI_Controller method.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* Returns current CI instance object</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">get_instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> CI_Controller::get_instance();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载app应用的自定义控制器</span></span><br><span class="line"><span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'core/'</span>.$CFG-&gt;config[<span class="string">'subclass_prefix'</span>].<span class="string">'Controller.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span> APPPATH.<span class="string">'core/'</span>.$CFG-&gt;config[<span class="string">'subclass_prefix'</span>].<span class="string">'Controller.php'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为基准设置一个标记点，记录时间</span></span><br><span class="line">$BM-&gt;mark(<span class="string">'loading_time:_base_classes_end'</span>);</span><br></pre></td></tr></table></figure><h2 id="路由的设置与判断"><a href="#路由的设置与判断" class="headerlink" title="路由的设置与判断"></a>路由的设置与判断</h2><p>会有下面几种情况认为是404：  </p><ul><li>访问的文件不存在</li><li>请求的class不存在  </li><li>请求私有方法</li><li>请求原始基类</li><li>请求的方法不存在</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$e404 = <span class="keyword">FALSE</span>;</span><br><span class="line">$class = ucfirst($RTR-&gt;class);</span><br><span class="line">$method = $RTR-&gt;method;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件不存在</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($class) <span class="keyword">OR</span> ! file_exists(APPPATH.<span class="string">'controllers/'</span>.$RTR-&gt;directory.$class.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$e404 = <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 加载该class文件</span></span><br><span class="line"><span class="keyword">require_once</span>(APPPATH.<span class="string">'controllers/'</span>.$RTR-&gt;directory.$class.<span class="string">'.php'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该class不存在 || 请求私有方法 || 请求原始基类</span></span><br><span class="line"><span class="keyword">if</span> ( ! class_exists($class, <span class="keyword">FALSE</span>) <span class="keyword">OR</span> $method[<span class="number">0</span>] === <span class="string">'_'</span> <span class="keyword">OR</span> method_exists(<span class="string">'CI_Controller'</span>, $method))</span><br><span class="line">&#123;</span><br><span class="line">$e404 = <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">elseif</span> (method_exists($class, <span class="string">'_remap'</span>))</span><br><span class="line">&#123;</span><br><span class="line">$params = <span class="keyword">array</span>($method, array_slice($URI-&gt;rsegments, <span class="number">2</span>));</span><br><span class="line">$method = <span class="string">'_remap'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求的方法不存在</span></span><br><span class="line"><span class="keyword">elseif</span> ( ! in_array(strtolower($method), array_map(<span class="string">'strtolower'</span>, get_class_methods($class)), <span class="keyword">TRUE</span>))</span><br><span class="line">&#123;</span><br><span class="line">$e404 = <span class="keyword">TRUE</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 针对404的处理</span></span><br><span class="line"><span class="keyword">if</span> ($e404)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( ! <span class="keyword">empty</span>($RTR-&gt;routes[<span class="string">'404_override'</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sscanf($RTR-&gt;routes[<span class="string">'404_override'</span>], <span class="string">'%[^/]/%s'</span>, $error_class, $error_method) !== <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">$error_method = <span class="string">'index'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$error_class = ucfirst($error_class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( ! class_exists($error_class, <span class="keyword">FALSE</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (file_exists(APPPATH.<span class="string">'controllers/'</span>.$RTR-&gt;directory.$error_class.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>(APPPATH.<span class="string">'controllers/'</span>.$RTR-&gt;directory.$error_class.<span class="string">'.php'</span>);</span><br><span class="line">$e404 = ! class_exists($error_class, <span class="keyword">FALSE</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Were we in a directory? If so, check for a global override</span></span><br><span class="line"><span class="keyword">elseif</span> ( ! <span class="keyword">empty</span>($RTR-&gt;directory) &amp;&amp; file_exists(APPPATH.<span class="string">'controllers/'</span>.$error_class.<span class="string">'.php'</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">require_once</span>(APPPATH.<span class="string">'controllers/'</span>.$error_class.<span class="string">'.php'</span>);</span><br><span class="line"><span class="keyword">if</span> (($e404 = ! class_exists($error_class, <span class="keyword">FALSE</span>)) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line">$RTR-&gt;directory = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">$e404 = <span class="keyword">FALSE</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Did we reset the $e404 flag? If so, set the rsegments, starting from index 1</span></span><br><span class="line"><span class="keyword">if</span> ( ! $e404)</span><br><span class="line">&#123;</span><br><span class="line">$class = $error_class;</span><br><span class="line">$method = $error_method;</span><br><span class="line"></span><br><span class="line">$URI-&gt;rsegments = <span class="keyword">array</span>(</span><br><span class="line"><span class="number">1</span> =&gt; $class,</span><br><span class="line"><span class="number">2</span> =&gt; $method</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">show_404($RTR-&gt;directory.$class.<span class="string">'/'</span>.$method);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($method !== <span class="string">'_remap'</span>)</span><br><span class="line">&#123;</span><br><span class="line">$params = array_slice($URI-&gt;rsegments, <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解析请求的类，并调用请求的方法"><a href="#解析请求的类，并调用请求的方法" class="headerlink" title="解析请求的类，并调用请求的方法"></a>解析请求的类，并调用请求的方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 新的钩子pre_controller</span></span><br><span class="line">$EXT-&gt;call_hook(<span class="string">'pre_controller'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mark a start point so we can benchmark the controller</span></span><br><span class="line">$BM-&gt;mark(<span class="string">'controller_execution_time_( '</span>.$class.<span class="string">' / '</span>.$method.<span class="string">' )_start'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化这个类</span></span><br><span class="line">$CI = <span class="keyword">new</span> $class();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的钩子post_controller_constructor</span></span><br><span class="line">$EXT-&gt;call_hook(<span class="string">'post_controller_constructor'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">call_user_func_array(<span class="keyword">array</span>(&amp;$CI, $method), $params);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mark a benchmark end point</span></span><br><span class="line">$BM-&gt;mark(<span class="string">'controller_execution_time_( '</span>.$class.<span class="string">' / '</span>.$method.<span class="string">' )_end'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的钩子post_controller</span></span><br><span class="line">$EXT-&gt;call_hook(<span class="string">'post_controller'</span>);</span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($EXT-&gt;call_hook(<span class="string">'display_override'</span>) === <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line">$OUT-&gt;_display();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* ------------------------------------------------------</span></span><br><span class="line"><span class="comment">*  Is there a "post_system" hook?</span></span><br><span class="line"><span class="comment">* ------------------------------------------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$EXT-&gt;call_hook(<span class="string">'post_system'</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;核心文件CodeIgniter-php&quot;&gt;&lt;a href=&quot;#核心文件CodeIgniter-php&quot; class=&quot;headerlink&quot; title=&quot;核心文件CodeIgniter.php&quot;&gt;&lt;/a&gt;核心文件CodeIgniter.php&lt;/h1&gt;&lt;p&gt;文件
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="CodeIgniter" scheme="https://pengwenwu.github.io/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>大疆2018秋招笔试算法题最后一题</title>
    <link href="https://pengwenwu.github.io/2018/07/06/%E5%A4%A7%E7%96%862018%E7%A7%8B%E6%8B%9B%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E9%A2%98%E6%9C%80%E5%90%8E%E4%B8%80%E9%A2%98/"/>
    <id>https://pengwenwu.github.io/2018/07/06/大疆2018秋招笔试算法题最后一题/</id>
    <published>2018-07-06T15:31:22.000Z</published>
    <updated>2018-07-24T15:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>给定一个非负整数数组，最初位于数组的第一个位置。数组中的元素代表你在该位置可以跳跃的最大长度，你的目的是到达数组的最后一个位置。（假设你总是可以到达数组的最后一个位置，即除了最后一个位置，其他值不能为0）  </p><p>例如：<br>输入：[2,3,1,1,4]<br>输出：2<br>解释：跳到最后一个位置的最小跳跃数是 2。<br>从下标0跳到下标为1的位置，跳一步，然后跳3步达到数组的最后一个位置。  </p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>即在跳跃距离内，选择一个下一次跳的最远的地方。  </p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>作为一个算法渣渣，这种是第一时间能想到的方法，肯定不是最优解。这种最差情况的时间复杂度是<code>n^2</code>，最好情况是<code>n</code>，所以总体时间复杂度是<code>nlogn</code>么。。。不知道怎么算~~~<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getShortestValue</span><span class="params">(array $arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $count = <span class="number">0</span>;</span><br><span class="line">    $length = count($arr);</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $length;) &#123;</span><br><span class="line">        $count++;</span><br><span class="line"></span><br><span class="line">        $current_value = $i + $arr[$i];</span><br><span class="line">        <span class="comment">// 一步到位，跳出循环</span></span><br><span class="line">        <span class="keyword">if</span> ($current_value &gt;= $length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> $count;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $max_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ($j = $i + <span class="number">1</span>; $j &lt;= $current_value; $j++) &#123;</span><br><span class="line">            $count++;</span><br><span class="line"></span><br><span class="line">            $tmp = $j + $arr[$j];</span><br><span class="line">            <span class="keyword">if</span> ($tmp &gt;= $length - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> $count;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($tmp &gt;= $max_value) &#123;</span><br><span class="line">                $max_value = $tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $i = $max_value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">$arr2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">echo</span> getShortestValue($arr), <span class="string">"\n"</span>; <span class="comment">// 5</span></span><br><span class="line"><span class="keyword">echo</span> getShortestValue($arr2), <span class="string">"\n"</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><blockquote><p>总结：好久不接触算法，已经忘光了，这种算是简单的，却需要花这么久时间，反思。<br>解完才想起来，应该是要用最短路径方法去解的</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h3&gt;&lt;p&gt;给定一个非负整数数组，最初位于数组的第一个位置。数组中的元素代表你在该位置可以跳跃的最大长度，你的目的是到达数组的最后一个位置。（假设你总是
      
    
    </summary>
    
      <category term="算法" scheme="https://pengwenwu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://pengwenwu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最短路径" scheme="https://pengwenwu.github.io/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>PHP引用</title>
    <link href="https://pengwenwu.github.io/2018/07/05/PHP%E5%BC%95%E7%94%A8/"/>
    <id>https://pengwenwu.github.io/2018/07/05/PHP引用/</id>
    <published>2018-07-05T15:35:27.000Z</published>
    <updated>2018-07-05T15:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ol><li><a href="http://www.php.net/manual/zh/language.references.whatare.php" target="_blank" rel="noopener">引用是什么</a>  </li><li><a href="http://php.net/manual/zh/language.references.arent.php" target="_blank" rel="noopener">引用不是什么</a>  </li><li><a href="http://www.php.net/manual/zh/language.references.whatdo.php" target="_blank" rel="noopener">引用做什么</a>  </li><li><a href="http://php.net/manual/zh/language.references.pass.php" target="_blank" rel="noopener">引用传递</a>  </li><li><a href="http://php.net/manual/zh/language.references.return.php" target="_blank" rel="noopener">引用返回</a>   </li></ol><h3 id="php引用"><a href="#php引用" class="headerlink" title="php引用"></a>php引用</h3><h4 id="1-变量的引用"><a href="#1-变量的引用" class="headerlink" title="1. 变量的引用"></a>1. 变量的引用</h4><p>php的引用允许两个变量指向同一个内容<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b =&amp; $a;</span><br><span class="line"><span class="keyword">echo</span> $a, $b;  <span class="comment">// 10, 10</span></span><br><span class="line"></span><br><span class="line">$b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">echo</span> $a, $b; <span class="comment">// 20, 20</span></span><br></pre></td></tr></table></figure></p><h4 id="2-函数的引用传递"><a href="#2-函数的引用传递" class="headerlink" title="2. 函数的引用传递"></a>2. 函数的引用传递</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(&amp;$var)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $var++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=<span class="number">5</span>;</span><br><span class="line">foo($a); <span class="comment">// 6</span></span><br><span class="line">foo($a); <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $a; <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><h4 id="3-函数的引用返回"><a href="#3-函数的引用返回" class="headerlink" title="3. 函数的引用返回"></a>3. 函数的引用返回</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> &amp;<span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $b = <span class="number">0</span>;<span class="comment">//申明一个静态变量</span></span><br><span class="line">    $b = $b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">echo</span> $b;</span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = test();<span class="comment">//这条语句会输出　$b的值　为１</span></span><br><span class="line">$a = <span class="number">5</span>;</span><br><span class="line">$a = test();<span class="comment">//这条语句会输出　$b的值　为2</span></span><br><span class="line"></span><br><span class="line">$a =&amp; test();<span class="comment">//这条语句会输出　$b的值　为3</span></span><br><span class="line">$a = <span class="number">5</span>;</span><br><span class="line">$a = test();<span class="comment">//这条语句会输出　$b的值　为6</span></span><br></pre></td></tr></table></figure><p>没有加&amp;, 跟普通的函数调用没有区别。  </p><p>而引用返回的作用，相当于把$b的内存地址返回，赋值给$a，使得$a, $b的内存地址指向同一个地方，即相当于执行了($a =&amp; $b;)  </p><p>更多的是使用在对象中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $value = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> &amp;<span class="title">getValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj     = <span class="keyword">new</span> Foo;</span><br><span class="line">$myValue = &amp;$obj-&gt;getValue();</span><br><span class="line"><span class="keyword">echo</span> $myValue; <span class="comment">// 42;</span></span><br><span class="line"></span><br><span class="line">$obj2        = <span class="keyword">new</span> Foo;</span><br><span class="line">$obj2-&gt;value = <span class="number">2</span>;</span><br><span class="line">$myValue     =&amp; $obj2-&gt;getValue();</span><br><span class="line"><span class="keyword">echo</span> $myValue; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><h3 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h3><p>php一个比较重要的内部机制是写时复制<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">$b = $a; <span class="comment">// 此时$b, $a 指向同一地方</span></span><br><span class="line"></span><br><span class="line">$b = <span class="number">20</span>; <span class="comment">// 在写入时，才会给$b 额外分配存储空间</span></span><br></pre></td></tr></table></figure></p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>本来之前了解的，使用引用传递能够提高运行效率，本机测试也是能提高30%左右。不过看这篇文章，介绍引用坑大于利，所以不再推荐。文章地址：<a href="https://zhuanlan.zhihu.com/p/35107602" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35107602</a>  </p><blockquote><p>参考文章：<a href="https://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/10/2173092.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaochaohuashengmi/archive/2011/09/10/2173092.html</a>  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;官方文档&quot;&gt;&lt;a href=&quot;#官方文档&quot; class=&quot;headerlink&quot; title=&quot;官方文档&quot;&gt;&lt;/a&gt;官方文档&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.php.net/manual/zh/language.reference
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP静态变量</title>
    <link href="https://pengwenwu.github.io/2018/07/03/PHP%E9%9D%99%E6%80%81%E5%8F%98%E9%87%8F/"/>
    <id>https://pengwenwu.github.io/2018/07/03/PHP静态变量/</id>
    <published>2018-07-03T15:31:53.000Z</published>
    <updated>2018-07-03T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常意义上的静态变量是静态分配，他们的生命周期和程序的生命周期一样，只有在程序退出的时候才结束生命周期。  </p><p>php的静态变量可以分为：  </p><ul><li>静态全局变量：php中的全局变量也可以理解为静态全局变量，因为除非明确unset释放，在程序运行过程中始终存在  </li><li>静态局部变量：即函数内定义的静态变量，函数在执行时对变量的操作会保持到下一次函数执行，直到程序终止  </li><li>静态成员变量：在类中定义的静态变量，和实例变量相对应，静态成员变量可以在所有实例中共享  </li></ul><p>静态局部变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $b = <span class="number">0</span>;</span><br><span class="line">    $b = $b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">echo</span> $b;</span><br><span class="line">    <span class="keyword">return</span> $b;</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 1</span></span><br><span class="line">test(); <span class="comment">// 2</span></span><br><span class="line">test(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p>静态变量只能被初始化一次<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">static</span> $a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">$a = <span class="number">10</span>;</span><br><span class="line">var_dump($a); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> $a = <span class="number">0</span>;</span><br><span class="line">var_dump($a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></p><p>静态成员变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$foo1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">echo</span> $foo1::$a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">$foo2 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">echo</span> $foo2::$a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> FOO::$a; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>修改静态成员变量<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> $a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$foo1 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">echo</span> $foo1::$a; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">$foo1::$a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> $foo1::$a; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">$foo2 = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">echo</span> $foo2::$a; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> FOO::$a; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></p><blockquote><p>参考链接：<a href="http://www.php-internals.com/book/?p=chapt03/03-04-static-var" target="_blank" rel="noopener">《深入理解PHP内核 - 静态变量》</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常意义上的静态变量是静态分配，他们的生命周期和程序的生命周期一样，只有在程序退出的时候才结束生命周期。  &lt;/p&gt;
&lt;p&gt;php的静态变量可以分为：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;静态全局变量：php中的全局变量也可以理解为静态全局变量，因为除非明确unset释放，在程序
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>CI框架3.x源码阅读笔记一之入口文件index.php</title>
    <link href="https://pengwenwu.github.io/2018/07/02/CI%E6%A1%86%E6%9E%B63.x%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0%E4%B8%80%E4%B9%8B%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6index.php.md/"/>
    <id>https://pengwenwu.github.io/2018/07/02/CI框架3.x源码阅读笔记一之入口文件index.php.md/</id>
    <published>2018-07-02T14:27:08.000Z</published>
    <updated>2018-07-08T09:21:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当前框架版本define(‘CI_VERSION’, ‘3.0.2’);  </p></blockquote><h1 id="入口文件index-php"><a href="#入口文件index-php" class="headerlink" title="入口文件index.php"></a>入口文件index.php</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment"># 对比项目跟原框架增加下列代码</span></span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../etc/environment.php'</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../vendor/autoload.php'</span>;</span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../etc/load_all.php'</span>;</span><br></pre></td></tr></table></figure><p>主要完成下列工作：</p><h2 id="加载环境配置文件"><a href="#加载环境配置文件" class="headerlink" title="加载环境配置文件"></a>加载环境配置文件</h2><p>通过environment文件判断并设置当前的环境<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../etc/environment.php'</span>;</span><br></pre></td></tr></table></figure></p><ul><li><p>通过修改apache或nginx配置，设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># apache</span></span><br><span class="line"><span class="comment"># SetEnv key=value</span></span><br><span class="line">SetEnv CI_ENV development_beta</span><br><span class="line"></span><br><span class="line"><span class="comment"># nginx</span></span><br><span class="line"><span class="comment"># key value</span></span><br><span class="line">fastcgi_param CI_ENV beta;</span><br></pre></td></tr></table></figure></li><li><p>在通过<code>cli</code>运行时，通过<code>$_SERVER[&#39;argv&#39;]</code>获取传递给脚本的参数<code>数组</code>，第一个肯定为当前脚本名。  </p></li></ul><h2 id="设置报警级别"><a href="#设置报警级别" class="headerlink" title="设置报警级别"></a>设置报警级别</h2><p>通过不同的环境变量，设置不同级别的报警。<br>CI默认会有三个级别：development（开发），testing（测试），production（生产）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">switch</span> (ENVIRONMENT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'development'</span>:</span><br><span class="line">error_reporting(E_ALL &amp; ~E_NOTICE);</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'development_beta'</span>:</span><br><span class="line">        error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_WARNING);</span><br><span class="line">        ini_set(<span class="string">'display_errors'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'testing'</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'production'</span>:</span><br><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (version_compare(PHP_VERSION, <span class="string">'5.3'</span>, <span class="string">'&gt;='</span>))</span><br><span class="line">&#123;</span><br><span class="line">error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_DEPRECATED &amp; ~E_STRICT &amp; ~E_USER_NOTICE &amp; ~E_USER_DEPRECATED);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">error_reporting(E_ALL &amp; ~E_NOTICE &amp; ~E_STRICT &amp; ~E_USER_NOTICE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">header(<span class="string">'HTTP/1.1 503 Service Unavailable.'</span>, <span class="keyword">TRUE</span>, <span class="number">503</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'The application environment is not set correctly.'</span>;</span><br><span class="line"><span class="keyword">exit</span>(<span class="number">1</span>); <span class="comment">// EXIT_ERROR</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="配置系统、应用、视图等程序目录"><a href="#配置系统、应用、视图等程序目录" class="headerlink" title="配置系统、应用、视图等程序目录"></a>配置系统、应用、视图等程序目录</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义系统目录名称</span></span><br><span class="line">$system_path = <span class="string">'../system'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义应用目录名称</span></span><br><span class="line">$application_folder = <span class="string">'../application'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视图文件存放目录</span></span><br><span class="line"><span class="comment">// 如果为空，则默认到应用程序文件夹内的标准位置</span></span><br><span class="line">$view_folder = <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h2 id="cli目录设置"><a href="#cli目录设置" class="headerlink" title="cli目录设置"></a>cli目录设置</h2><p>bool chdir ( string $directory )<br>将 PHP 的当前目录改为 directory  </p><p>string dirname ( string $path )<br>给出一个包含有指向一个文件的全路径的字符串，本函数返回去掉文件名后的目录名。  </p><p>string realpath ( string $path )<br>realpath() 扩展所有的符号连接并且处理输入的 path 中的 ‘/./‘, ‘/../‘ 以及多余的 ‘/‘ 并返回规范化后的绝对路径名。返回的路径中没有符号连接，’/./‘ 或 ‘/../‘ 成分。  </p><p>STDIN、STDOUT、STDERR是PHP以 CLI（Command Line Interface）模式运行而定义的三个常量，这三个常量类似于Shell的stdin,stdout,stdout,分别是PHP CLI模式下的标准输入、标准输出和标准错误流。  </p><p>这三行代码是为了保证命令行模式下，CI框架可以正常运行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (defined(<span class="string">'STDIN'</span>))</span><br><span class="line">&#123;</span><br><span class="line">    chdir(dirname(<span class="keyword">__FILE__</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="系统、应用、视图等目录的正确性验证"><a href="#系统、应用、视图等目录的正确性验证" class="headerlink" title="系统、应用、视图等目录的正确性验证"></a>系统、应用、视图等目录的正确性验证</h2><h3 id="系统-system-文件目录的正确性验证"><a href="#系统-system-文件目录的正确性验证" class="headerlink" title="系统(system)文件目录的正确性验证"></a>系统(system)文件目录的正确性验证</h3><p>用于校验生成system系统文件目录, 得到规范化的绝对路径名<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (($_temp = realpath($system_path)) !== <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $system_path = $_temp.<span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 确保后面有斜线</span></span><br><span class="line">    $system_path = rtrim($system_path, <span class="string">'/'</span>).<span class="string">'/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果$system_path所指向的文件目录不存在，则die</span></span><br><span class="line"><span class="keyword">if</span> ( ! is_dir($system_path))</span><br><span class="line">&#123;</span><br><span class="line">    header(<span class="string">'HTTP/1.1 503 Service Unavailable.'</span>, <span class="keyword">TRUE</span>, <span class="number">503</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'Your system folder path does not appear to be set correctly. Please open the following file and correct this: '</span>.pathinfo(<span class="keyword">__FILE__</span>, PATHINFO_BASENAME);</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">3</span>); <span class="comment">// EXIT_CONFIG</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="定义主要的路径常量"><a href="#定义主要的路径常量" class="headerlink" title="定义主要的路径常量"></a>定义主要的路径常量</h3><p>mixed pathinfo ( string $path [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME ] )<br>pathinfo() 返回一个关联数组包含有 path 的信息。返回关联数组还是字符串取决于 options。  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The name of THIS file</span></span><br><span class="line">define(<span class="string">'SELF'</span>, pathinfo(<span class="keyword">__FILE__</span>, PATHINFO_BASENAME));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Path to the system folder</span></span><br><span class="line">define(<span class="string">'BASEPATH'</span>, str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, $system_path));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Path to the front controller (this file)</span></span><br><span class="line">define(<span class="string">'FCPATH'</span>, dirname(<span class="keyword">__FILE__</span>).<span class="string">'/'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Name of the "system folder"</span></span><br><span class="line">define(<span class="string">'SYSDIR'</span>, trim(strrchr(trim(BASEPATH, <span class="string">'/'</span>), <span class="string">'/'</span>), <span class="string">'/'</span>));</span><br></pre></td></tr></table></figure><h3 id="应用-application-文件目录的正确性验证"><a href="#应用-application-文件目录的正确性验证" class="headerlink" title="应用(application)文件目录的正确性验证"></a>应用(application)文件目录的正确性验证</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (is_dir($application_folder))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (($_temp = realpath($application_folder)) !== <span class="keyword">FALSE</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $application_folder = $_temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    define(<span class="string">'APPPATH'</span>, $application_folder.DIRECTORY_SEPARATOR);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( ! is_dir(BASEPATH.$application_folder.DIRECTORY_SEPARATOR))</span><br><span class="line">    &#123;</span><br><span class="line">        header(<span class="string">'HTTP/1.1 503 Service Unavailable.'</span>, <span class="keyword">TRUE</span>, <span class="number">503</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Your application folder path does not appear to be set correctly. Please open the following file and correct this: '</span>.<span class="keyword">SELF</span>;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">3</span>); <span class="comment">// EXIT_CONFIG</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    define(<span class="string">'APPPATH'</span>, BASEPATH.$application_folder.DIRECTORY_SEPARATOR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视图-view-文件目录的正确性验证"><a href="#视图-view-文件目录的正确性验证" class="headerlink" title="视图(view)文件目录的正确性验证"></a>视图(view)文件目录的正确性验证</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ( ! is_dir($view_folder))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( ! <span class="keyword">empty</span>($view_folder) &amp;&amp; is_dir(APPPATH.$view_folder.DIRECTORY_SEPARATOR))</span><br><span class="line">    &#123;</span><br><span class="line">        $view_folder = APPPATH.$view_folder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ( ! is_dir(APPPATH.<span class="string">'views'</span>.DIRECTORY_SEPARATOR))</span><br><span class="line">    &#123;</span><br><span class="line">        header(<span class="string">'HTTP/1.1 503 Service Unavailable.'</span>, <span class="keyword">TRUE</span>, <span class="number">503</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'Your view folder path does not appear to be set correctly. Please open the following file and correct this: '</span>.<span class="keyword">SELF</span>;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">3</span>); <span class="comment">// EXIT_CONFIG</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $view_folder = APPPATH.<span class="string">'views'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (($_temp = realpath($view_folder)) !== <span class="keyword">FALSE</span>)</span><br><span class="line">&#123;</span><br><span class="line">    $view_folder = $_temp.DIRECTORY_SEPARATOR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    $view_folder = rtrim($view_folder, <span class="string">'/\\'</span>).DIRECTORY_SEPARATOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">define(<span class="string">'VIEWPATH'</span>, $view_folder);</span><br></pre></td></tr></table></figure><h2 id="加载composer"><a href="#加载composer" class="headerlink" title="加载composer"></a>加载composer</h2><p>各种包的加载<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../vendor/autoload.php'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="其余初始化的文件加载"><a href="#其余初始化的文件加载" class="headerlink" title="其余初始化的文件加载"></a>其余初始化的文件加载</h2><p>包括一些监控、报警、调用链追踪<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> dirname(<span class="keyword">__FILE__</span>) . <span class="string">'/../etc/load_all.php'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="加载核心文件"><a href="#加载核心文件" class="headerlink" title="加载核心文件"></a>加载核心文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> BASEPATH.<span class="string">'core/CodeIgniter.php'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>defined() - 检查某个名称的常量是否存在<br>get_loaded_extensions() - 返回所有编译并加载模块名的 array<br>get_defined_functions() - 返回所有已定义函数的数组<br>get_defined_vars() - 返回由所有已定义变量所组成的数组  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;当前框架版本define(‘CI_VERSION’, ‘3.0.2’);  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;入口文件index-php&quot;&gt;&lt;a href=&quot;#入口文件index-php&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="CodeIgniter" scheme="https://pengwenwu.github.io/tags/CodeIgniter/"/>
    
  </entry>
  
  <entry>
    <title>workerman入门</title>
    <link href="https://pengwenwu.github.io/2018/06/27/workerman%E5%85%A5%E9%97%A8/"/>
    <id>https://pengwenwu.github.io/2018/06/27/workerman入门/</id>
    <published>2018-06-27T15:38:55.000Z</published>
    <updated>2018-06-27T15:40:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于php不像nodejs、java一样可以常驻内存，没有现成的websock io，需要通过原生的php socket去实现服务端websocket的通信。对于菜鸟而言，还是使用现成的框架更方便，等水平足够了，才需要去考虑这些底层的实现  </p></blockquote><h1 id="什么是workerman？"><a href="#什么是workerman？" class="headerlink" title="什么是workerman？"></a>什么是workerman？</h1><p>Workerman是一款纯PHP开发的开源高性能的<code>PHP socket</code> 服务器框架。本身是一个PHP多进程服务器框架，具有PHP进程管理以及socket通信的模块，所以不依赖php-fpm、nginx或者apache等这些容器便可以独立运行。  </p><blockquote><p>官网：<a href="http://www.workerman.net/workerman" target="_blank" rel="noopener">http://www.workerman.net/workerman</a><br>workerman手册：<a href="http://doc.workerman.net/640361" target="_blank" rel="noopener">http://doc.workerman.net/640361</a>  </p></blockquote><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>纯PHP开发</li><li>支持PHP多进程</li><li>支持TCP、UDP</li><li>支持长连接</li><li>支持各种应用层协议</li><li>支持高并发</li><li>支持服务平滑重启</li><li>支持文件更新检测及自动加载</li><li>支持以指定用户运行子进程</li><li>支持对象或者资源永久保持</li><li>高性能</li><li>支持HHVM</li><li>支持分布式部署</li><li>支持守护进程化</li><li>支持多端口监听</li><li>支持标准输入输出重定向</li></ol><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><h2 id="Linux用户-含Mac-OS"><a href="#Linux用户-含Mac-OS" class="headerlink" title="Linux用户(含Mac OS)"></a>Linux用户(含Mac OS)</h2><ol><li>安装PHP&gt;=5.3.3，并安装了pcntl、posix扩展</li><li>建议安装event或者libevent扩展，但不是必须的（注意event扩展需要PHP&gt;=5.4）</li></ol><h2 id="Linux环境检查脚本"><a href="#Linux环境检查脚本" class="headerlink" title="Linux环境检查脚本"></a>Linux环境检查脚本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Ss http://www.workerman.net/check.php | php</span><br></pre></td></tr></table></figure><p>如果脚本中全部提示ok，则代表满足WorkerMan运行环境  </p><p>注意：检测脚本中没有检测event扩展或者libevent扩展，如果并发连接数大于1024建议安装event扩展或者libevent扩展  </p><h2 id="如何安装扩展"><a href="#如何安装扩展" class="headerlink" title="如何安装扩展"></a>如何安装扩展</h2><p>参考文档：<a href="http://doc.workerman.net/appendices/install-extension.html" target="_blank" rel="noopener">http://doc.workerman.net/appendices/install-extension.html</a></p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>普通安装可以参照官网，通过git下载</p><p>也可以通过composer安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require workerman/workerman</span><br></pre></td></tr></table></figure></p><h2 id="开发实例"><a href="#开发实例" class="headerlink" title="开发实例"></a>开发实例</h2><h3 id="websocket实例"><a href="#websocket实例" class="headerlink" title="websocket实例"></a>websocket实例</h3><p>服务端实现<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'./vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里与上个例子不同，使用的是websocket协议</span></span><br><span class="line">$ws_worker = <span class="keyword">new</span> Worker(<span class="string">"websocket://0.0.0.0:9501"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动4个进程对外提供服务</span></span><br><span class="line">$ws_worker-&gt;count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当收到客户端发来的数据后返回hello $data给客户端</span></span><br><span class="line">$ws_worker-&gt;onMessage = <span class="function"><span class="keyword">function</span> <span class="params">($connection, $data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送hello $data</span></span><br><span class="line">    $connection-&gt;send(<span class="string">'hello '</span> . $data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><p>客户端实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ws = <span class="keyword">new</span> WebSocket(<span class="string">"ws://127.0.0.1:9501"</span>);</span><br><span class="line">ws.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"连接成功"</span>);</span><br><span class="line">    ws.send(<span class="string">'tom'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"给服务端发送一个字符串：tom"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ws.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"收到服务端的消息："</span> + e.data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>以debug(调试)方式启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php start</span><br></pre></td></tr></table></figure></p><p>以daemon(守护进程)方式启动<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php start -d</span><br></pre></td></tr></table></figure></p><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php stop</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php restart</span><br></pre></td></tr></table></figure><h3 id="平滑重启"><a href="#平滑重启" class="headerlink" title="平滑重启"></a>平滑重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php reload</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php status</span><br></pre></td></tr></table></figure><h3 id="查看连接状态"><a href="#查看连接状态" class="headerlink" title="查看连接状态"></a>查看连接状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php start.php connections</span><br></pre></td></tr></table></figure><h3 id="debug和daemon方式区别"><a href="#debug和daemon方式区别" class="headerlink" title="debug和daemon方式区别"></a>debug和daemon方式区别</h3><ol><li>以debug方式启动，代码中echo、var_dump、print等打印函数会直接输出在终端  </li><li>以daemon方式启动，代码中echo、var_dump、print等打印会默认重定向到/dev/null文件，可以通过设置<code>Worker::$stdoutFile = &#39;/your/path/file&#39;;</code>来设置这个文件路径  </li><li>以debug方式启动，终端关闭后workerman会随之关闭并退出  </li><li>以daemon方式启动，终端关闭后workerman继续后台正常运行  </li></ol><h3 id="什么是平滑重启？"><a href="#什么是平滑重启？" class="headerlink" title="什么是平滑重启？"></a>什么是平滑重启？</h3><p>平滑重启不同于普通的重启，平滑重启可以做到在不影响用户的情况下重启服务，以便重新载入PHP程序，完成业务代码更新。</p><p>平滑重启一般应用于业务更新或者版本发布过程中，能够避免因为代码发布重启服务导致的暂时性服务不可用的影响。  </p><p><strong>注意：只有子进程运行过程中载入的文件支持reload，主进程载入的文件不支持reload。或者说Worker::runAll执行完后workerman运行过程中动态加载的文件支持reload，Worker::runAll执行前就载入的文件代码不支持reload</strong>  </p><h3 id="平滑重启原理"><a href="#平滑重启原理" class="headerlink" title="平滑重启原理"></a>平滑重启原理</h3><p>WorkerMan分为主进程和子进程，主进程负责监控子进程，子进程负责接收客户端的连接和连接上发来的请求数据，做相应的处理并返回数据给客户端。当业务代码更新时，其实我们只要更新子进程，便可以达到更新代码的目的。  </p><p>当WorkerMan主进程收到平滑重启信号时，主进程会向其中一个子进程发送安全退出(让对应进程处理完毕当前请求后才退出)信号，当这个进程退出后，主进程会重新创建一个新的子进程（这个子进程载入了新的PHP代码），然后主进程再次向另外一个旧的进程发送停止命令，这样一个进程一个进程的重启，直到所有旧的进程全部被置换为止。  </p><p>我们看到平滑重启实际上是让旧的业务进程逐个退出然后并逐个创建新的进程做到的。为了在平滑重启时不影响客用户，这就要求进程中不要保存用户相关的状态信息，即业务进程最好是无状态的，避免由于进程退出导致信息丢失。  </p><h2 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h2><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="平滑重启-1"><a href="#平滑重启-1" class="headerlink" title="平滑重启"></a>平滑重启</h4><p>注意：只有在on{…}回调中载入的文件平滑重启后才会自动更新，启动脚本中直接载入的文件或者写死的代码运行reload不会自动更新。</p><h4 id="区分主进程和子进程"><a href="#区分主进程和子进程" class="headerlink" title="区分主进程和子进程"></a>区分主进程和子进程</h4><p>有必要注意下代码是运行在主进程还是子进程，一般来说在<code>Worker::runAll();</code>调用前运行的代码都是在<code>主进程</code>运行的，<code>onXXX</code>回调运行的代码都属于<code>子进程</code>。注意写在<code>Worker::runAll();</code>后面的代码永远不会被执行。  </p><p>注意： 不要在主进程中初始化数据库、memcache、redis等连接资源，因为主进程初始化的连接可能会被子进程自动继承（尤其是使用单例的时候），所有进程都持有同一个连接，服务端通过这个连接返回的数据在多个进程上都可读，会导致数据错乱。同样的，如果任何一个进程关闭连接(例如daemon模式运行时主进程会退出导致连接关闭)，都导致所有子进程的连接都被一起关闭，并发生不可预知的错误，例如mysql gone away 错误。</p><p>推荐在onWorkerStart里面初始化连接资源。  </p><h2 id="Worker类"><a href="#Worker类" class="headerlink" title="Worker类"></a>Worker类</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>初始化一个Worker容器实例，可以设置容器的一些属性和回调接口，完成特定功能。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Worker::__construct([string <span class="variable">$listen</span> , array <span class="variable">$context</span>])</span><br></pre></td></tr></table></figure></p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="listen-（可选参数，不填写表示不监听任何端口）"><a href="#listen-（可选参数，不填写表示不监听任何端口）" class="headerlink" title="$listen （可选参数，不填写表示不监听任何端口）"></a><code>$listen</code> （可选参数，不填写表示不监听任何端口）</h5><p>$listen 的格式为 <code>&lt;协议&gt;://&lt;监听地址&gt;</code>  </p><h5 id="context"><a href="#context" class="headerlink" title="$context"></a><code>$context</code></h5><p>一个数组。用于传递socket的上下文选项。  </p><p>比如传递ssl证书<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 证书最好是申请的证书</span></span><br><span class="line">$context = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'ssl'</span> =&gt; <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">'local_cert'</span> =&gt; <span class="string">'/etc/nginx/conf.d/ssl/server.pem'</span>, <span class="comment">// 也可以是crt文件</span></span><br><span class="line">        <span class="string">'local_pk'</span>   =&gt; <span class="string">'/etc/nginx/conf.d/ssl/server.key'</span>,</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 这里设置的是websocket协议</span></span><br><span class="line">$worker = <span class="keyword">new</span> Worker(<span class="string">'websocket://0.0.0.0:4431'</span>, $context);</span><br><span class="line"><span class="comment">// 设置transport开启ssl，websocket+ssl即wss</span></span><br><span class="line">$worker-&gt;transport = <span class="string">'ssl'</span>;</span><br><span class="line">$worker-&gt;onMessage = <span class="function"><span class="keyword">function</span><span class="params">($con, $msg)</span> </span>&#123;</span><br><span class="line">    $con-&gt;send(<span class="string">'ok'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><h3 id="部分常用属性"><a href="#部分常用属性" class="headerlink" title="部分常用属性"></a>部分常用属性</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Worker::<span class="variable">$id</span></span><br></pre></td></tr></table></figure><p>当前worker进程的id编号，范围为0到$worker-&gt;count-1  </p><p>这个属性对于区分worker进程非常有用，例如1个worker实例有多个进程，开发者只想在其中一个进程中设置定时器，则可以通过识别进程编号id来做到这一点，比如只在该worker实例id编号为0的进程设置定时器  </p><p><strong>注意</strong>：进程重启后id编号值是不变的。进程编号id的分配是基于每个worker实例的。每个worker实例都从0开始给自己的进程编号，所以worker实例间进程编号会有重复，但是一个worker实例中的进程编号不会重复。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Lib</span>\<span class="title">Timer</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'./Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line">$worker = <span class="keyword">new</span> Worker(<span class="string">'tcp://0.0.0.0:8585'</span>);</span><br><span class="line">$worker-&gt;count = <span class="number">4</span>;</span><br><span class="line">$worker-&gt;onWorkerStart = <span class="function"><span class="keyword">function</span><span class="params">($worker)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 只在id编号为0的进程上设置定时器，其它1、2、3号进程不设置定时器</span></span><br><span class="line">    <span class="keyword">if</span>($worker-&gt;id === <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Timer::add(<span class="number">1</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"4个worker进程，只在0号进程设置定时器\n"</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Worker::<span class="variable">$count</span></span><br></pre></td></tr></table></figure><p>设置当前Worker实例启动多少个进程，不设置时默认为1。  </p><p><strong>注意</strong>：此属性必须在<code>Worker::runAll();</code>运行前设置才有效。windows系统不支持此特性。</p><p>设置规则：  </p><ul><li>每个进程占用内存之和需要小于总内存（一般来说每个业务进程占用内存大概40M左右）  </li><li>如果是<code>IO密集型</code>，也就是业务中涉及到一些<code>阻塞式IO</code>，比如一般的访问Mysql、Redis等存储都是阻塞式访问的，进程数可以开大一些，如<code>配置成CPU核数的3倍</code>。注意<code>非阻塞式IO</code>属于<code>CPU密集型</code>，而不属于IO密集型。  </li><li>如果是CPU密集型，也就是业务中没有阻塞式IO开销，例如使用异步IO读取网络资源，进程不会被业务代码阻塞的情况下，可以把<code>进程数设置成和CPU核数一样</code>  </li><li>WorkerMan自身的IO都是<code>非阻塞</code>的，例如<code>Connection-&gt;send</code>等都是非阻塞的，属于<code>CPU密集型</code>操作。如果不清楚自己业务偏向于哪种类型，可设置进程数为<code>CPU核数的2倍</code>左右即可。  </li></ul><h4 id="transport"><a href="#transport" class="headerlink" title="transport"></a>transport</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string Worker::<span class="variable">$transport</span></span><br></pre></td></tr></table></figure><p>设置当前Worker实例所使用的<code>传输层协议</code>，目前只支持3种(<code>tcp</code>、<code>udp</code>、<code>ssl</code>)。不设置默认为<code>tcp</code>。  </p><p>注意：ssl需要Workerman版本&gt;=3.3.7</p><h4 id="connections"><a href="#connections" class="headerlink" title="connections"></a>connections</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array Worker::<span class="variable">$connections</span></span><br></pre></td></tr></table></figure><p>此属性中存储了当前进程的所有的<code>客户端连接对象</code>，其中id为connection的id编号</p><p>格式为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array(id=&gt;connection, id=&gt;connection, ...)</span><br></pre></td></tr></table></figure></p><h4 id="stdoutFile"><a href="#stdoutFile" class="headerlink" title="stdoutFile"></a>stdoutFile</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static string Worker::<span class="variable">$stdoutFile</span></span><br></pre></td></tr></table></figure><p>此属性为<code>全局静态属性</code>，如果以<code>守护进程</code>方式(-d启动)运行，则所有向终端的输出(echo var_dump等)都会被<code>重定向</code>到stdoutFile指定的文件中。</p><p>如果不设置，并且是以守护进程方式运行，则所有终端输出全部重定向到/dev/null</p><p>注意：此属性必须在Worker::runAll();运行前设置才有效。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line">Worker::$daemonize = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 所有的打印输出全部保存在/tmp/stdout.log文件中</span></span><br><span class="line">Worker::$stdoutFile = <span class="string">'/tmp/stdout.log'</span>;</span><br><span class="line">$worker = <span class="keyword">new</span> Worker(<span class="string">'text://0.0.0.0:8484'</span>);</span><br><span class="line">$worker-&gt;onWorkerStart = <span class="function"><span class="keyword">function</span><span class="params">($worker)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Worker start\n"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure><h4 id="reloadable"><a href="#reloadable" class="headerlink" title="reloadable"></a>reloadable</h4><p>设置当前Worker实例是否可以reload，即收到reload信号后<code>是否退出重启</code>。不设置默认为true，收到reload信号后自动重启进程。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool Worker::<span class="variable">$reloadable</span></span><br></pre></td></tr></table></figure></p><h4 id="daemonize"><a href="#daemonize" class="headerlink" title="daemonize"></a>daemonize</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static bool Worker::<span class="variable">$daemonize</span></span><br></pre></td></tr></table></figure><p>此属性为<code>全局静态属性</code>，表示是否以daemon(守护进程)方式运行。如果启动命令使用了 <code>-d</code> 参数，则该属性会自动设置为true。也可以代码中手动设置</p><h3 id="回调属性"><a href="#回调属性" class="headerlink" title="回调属性"></a>回调属性</h3><h4 id="onWorkerStart"><a href="#onWorkerStart" class="headerlink" title="onWorkerStart"></a>onWorkerStart</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onWorkerStart</span></span><br></pre></td></tr></table></figure><p>设置<code>Worker子进程</code>启动时的回调函数，每个子进程启动时都会执行。  </p><p>注意：onWorkerStart是在子进程启动时运行的，如果开启了多个子进程($worker-&gt;count &gt; 1)，每个子进程运行一次，则总共会运行$worker-&gt;count次。</p><p><strong>回调函数的参数:</strong>   </p><p>$worker: Worker对象</p><h4 id="onWorkerReload"><a href="#onWorkerReload" class="headerlink" title="onWorkerReload"></a>onWorkerReload</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onWorkerReload</span></span><br></pre></td></tr></table></figure><p>设置Worker收到reload信号后执行的回调。 </p><p>可以利用onWorkerReload回调做很多事情，例如在不需要重启进程的情况下重新加载业务配置文件。</p><p><strong>注意：</strong>  </p><p>子进程收到reload信号默认的动作是退出重启，以便新进程重新加载业务代码完成代码更新。所以reload后子进程在执行完onWorkerReload回调后便立刻退出是正常现象。</p><p>如果在收到reload信号后只想让子进程执行onWorkerReload，不想退出，可以在初始化Worker实例时设置对应的Worker实例的reloadable属性为false。  </p><p><strong>回调函数的参数:</strong>   </p><p>$worker: Worker对象</p><h4 id="onConnect"><a href="#onConnect" class="headerlink" title="onConnect"></a>onConnect</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onConnect</span></span><br></pre></td></tr></table></figure><p>当客户端与Workerman建立连接时(TCP三次握手完成后)触发的回调函数。每个连接只会触发<code>一次</code>onConnect回调。  </p><p>注意：onConnect事件仅仅代表客户端与Workerman完成了TCP三次握手，这时客户端还没有发来任何数据，此时除了通过$connection-&gt;getRemoteIp()获得对方ip，没有其他可以鉴别客户端的数据或者信息，所以在onConnect事件里无法确认对方是谁。要想知道对方是谁，需要客户端发送鉴权数据，例如某个token或者用户名密码之类，在<code>onMessage</code>回调里做鉴权。  </p><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象</p><h4 id="onMessage"><a href="#onMessage" class="headerlink" title="onMessage"></a>onMessage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onMessage</span></span><br></pre></td></tr></table></figure><p>当客户端通过连接发来数据时(Workerman收到数据时)触发的回调函数  </p><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象  </p><p>$data: 客户端连接上发来的数据  </p><h4 id="onClose"><a href="#onClose" class="headerlink" title="onClose"></a>onClose</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onClose</span></span><br></pre></td></tr></table></figure><p>当客户端连接与Workerman断开时触发的回调函数。不管连接是如何断开的，只要断开就会触发onClose。每个连接只会触发一次onClose。  </p><p>注意：如果对端是由于断网或者断电等极端情况断开的连接，这时由于无法及时发送tcp的fin包给workerman，workerman就无法得知连接已经断开，也就无法及时触发onClose。这种情况需要通过应用层<code>心跳</code>来解决。  </p><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象  </p><h4 id="onBufferDrain"><a href="#onBufferDrain" class="headerlink" title="onBufferDrain"></a>onBufferDrain</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onBufferDrain</span></span><br></pre></td></tr></table></figure><p>每个连接都有一个单独的应用层发送缓冲区，缓冲区大小由TcpConnection::$maxSendBufferSize决定，默认值为1MB，可以手动设置更改大小，更改后会对所有连接生效。  </p><p>该回调可能会在调用Connection::send后立刻被触发，比如发送大数据或者连续快速的向对端发送数据，由于网络等原因数据被大量积压在对应连接的发送缓冲区，当超过TcpConnection::$maxSendBufferSize上限时触发。</p><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象</p><h4 id="onBufferDrain-1"><a href="#onBufferDrain-1" class="headerlink" title="onBufferDrain"></a>onBufferDrain</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onBufferDrain</span></span><br></pre></td></tr></table></figure><p>该回调在应用层发送缓冲区数据全部发送完毕后触发。一般与onBufferFull配合使用，例如在onBufferFull时停止向对端继续send数据，在onBufferDrain恢复写入数据。</p><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象</p><h4 id="onError"><a href="#onError" class="headerlink" title="onError"></a>onError</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">callback Worker::<span class="variable">$onError</span></span><br></pre></td></tr></table></figure><p>当客户端的连接上发生错误时触发。  </p><p>目前错误类型有</p><ol><li><p>调用Connection::send由于客户端连接断开导致的失败（紧接着会触发onClose回调） (code:WORKERMAN_SEND_FAIL msg:client closed)  </p></li><li><p>在触发onBufferFull后(发送缓冲区已满)，仍然调用Connection::send，并且发送缓冲区仍然是满的状态导致发送失败(不会触发onClose回调)(code:WORKERMAN_SEND_FAIL msg:send buffer full and drop package)  </p></li><li><p>使用AsyncTcpConnection异步连接失败时(紧接着会触发onClose回调) (code:WORKERMAN_CONNECT_FAIL msg:stream_socket_client返回的错误消息)  </p></li></ol><p><strong>回调函数的参数:</strong>   </p><p>$connection: 连接对象<br>$code: 错误码<br>$msg: 错误消息  </p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="runAll"><a href="#runAll" class="headerlink" title="runAll"></a>runAll</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void Worker::runAll(void)</span><br></pre></td></tr></table></figure><p>运行所有Worker实例。</p><p><strong>注意：</strong></p><p>Worker::runAll()执行后将<code>永久阻塞</code>，也就是说位于Worker::runAll()后面的代码将不会被执行。所有Worker实例化应该都在Worker::runAll()前进行。  </p><h4 id="stopAll"><a href="#stopAll" class="headerlink" title="stopAll"></a>stopAll</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void Worker::stopAll(void)</span><br></pre></td></tr></table></figure><p>停止当前进程（子进程）的<code>所有Worker实例</code>并退出。  </p><p>此方法用于安全退出当前子进程，作用相当于调用exit/die退出当前子进程。</p><p>与直接调用exit/die区别是，直接调用exit或者die无法触发onWorkerStop回调，并且会导致一条WORKER EXIT UNEXPECTED错误日志。</p><h4 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void Worker::listen(void)</span><br></pre></td></tr></table></figure><p>用于实例化Worker后执行监听。  </p><h2 id="Connection类"><a href="#Connection类" class="headerlink" title="Connection类"></a>Connection类</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="id-1"><a href="#id-1" class="headerlink" title="id"></a>id</h4><h4 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string Connection::<span class="variable">$protocol</span></span><br></pre></td></tr></table></figure><p>设置当前连接的协议类</p><h4 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Worker Connection::<span class="variable">$worker</span></span><br></pre></td></tr></table></figure><p>此属性为只读属性，即当前connection对象所属的worker实例  </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="keyword">__DIR__</span> . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line">$worker = <span class="keyword">new</span> Worker(<span class="string">'websocket://0.0.0.0:8484'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个客户端发来数据时，转发给当前进程所维护的其它所有客户端</span></span><br><span class="line">$worker-&gt;onMessage = <span class="function"><span class="keyword">function</span><span class="params">($connection, $data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>($connection-&gt;worker-&gt;connections <span class="keyword">as</span> $con)</span><br><span class="line">    &#123;</span><br><span class="line">        $con-&gt;send($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 运行worker</span></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure><h4 id="maxSendBufferSize"><a href="#maxSendBufferSize" class="headerlink" title="maxSendBufferSize"></a>maxSendBufferSize</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int Connection::<span class="variable">$maxSendBufferSize</span></span><br></pre></td></tr></table></figure><p>此属性用来设置当前连接的应用层发送缓冲区大小。不设置默认为Connection::$defaultMaxSendBufferSize(1MB)。  </p><h4 id="defaultMaxSendBufferSize"><a href="#defaultMaxSendBufferSize" class="headerlink" title="defaultMaxSendBufferSize"></a>defaultMaxSendBufferSize</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static int Connection::<span class="variable">$defaultMaxSendBufferSize</span></span><br></pre></td></tr></table></figure><p>此属性为全局静态属性，用来设置所有连接的默认应用层发送缓冲区大小。不设置默认为1MB。 Connection::$defaultMaxSendBufferSize可以动态设置，设置后只对之后产生的新连接有效  </p><h4 id="maxPackageSize"><a href="#maxPackageSize" class="headerlink" title="maxPackageSize"></a>maxPackageSize</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static int Connection::<span class="variable">$maxPackageSize</span></span><br></pre></td></tr></table></figure><p>此属性为全局静态属性，用来设置每个连接能够接收的最大包包长。不设置默认为10MB。  </p><h3 id="回调属性-1"><a href="#回调属性-1" class="headerlink" title="回调属性"></a>回调属性</h3><p>与worker的回调属性作用相同  </p><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><h4 id="send"><a href="#send" class="headerlink" title="send"></a>send</h4><h4 id="getRemoteIp"><a href="#getRemoteIp" class="headerlink" title="getRemoteIp"></a>getRemoteIp</h4><h4 id="etRemotePort"><a href="#etRemotePort" class="headerlink" title="etRemotePort"></a>etRemotePort</h4><h3 id="Timer定时器类"><a href="#Timer定时器类" class="headerlink" title="Timer定时器类"></a>Timer定时器类</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int \Workerman\Lib\Timer::add(<span class="built_in">float</span> <span class="variable">$time_interval</span>, callable <span class="variable">$callback</span> [,<span class="variable">$args</span> = array(), bool <span class="variable">$persistent</span> = <span class="literal">true</span>])</span><br></pre></td></tr></table></figure><p>定时执行某个函数或者类方法  </p><p>注意：定时器是在当前进程中运行的，workerman中不会创建新的进程或者线程去运行定时器。  </p><p><strong>参数</strong><br>time_interval: 多长时间执行一次，单位秒，支持小数，可以精确到0.001，即精确到毫秒级别  </p><p>callback: 回调函数注意：如果回调函数是类的方法，则方法必须是public属性  </p><p>args: 回调函数的参数，必须为数组，数组元素为参数值  </p><p>persistent: 是否是持久的，如果只想定时执行一次，则传递false（只执行一次的任务在执行完毕后会自动销毁，不必调用Timer::del()）。默认是<code>true</code>，即一直定时执行  </p><p><strong>返回值</strong><br>返回一个整数，代表计时器的timerid，可以通过调用Timer::del($timerid)销毁这个计时器。  </p><p><strong>示例</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">use \Workerman\Worker;</span><br><span class="line">use \Workerman\Lib\Timer;</span><br><span class="line">require_once __DIR__ . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ws_worker</span> = new Worker(<span class="string">'websocket://0.0.0.0:8080'</span>);</span><br><span class="line"><span class="variable">$ws_worker</span>-&gt;count = 8;</span><br><span class="line">// 连接建立时给对应连接设置定时器</span><br><span class="line"><span class="variable">$ws_worker</span>-&gt;onConnect = <span class="keyword">function</span>(<span class="variable">$connection</span>)</span><br><span class="line">&#123;</span><br><span class="line">    // 每10秒执行一次</span><br><span class="line">    <span class="variable">$time_interval</span> = 10;</span><br><span class="line">    <span class="variable">$connect_time</span> = time();</span><br><span class="line">    // 给connection对象临时添加一个timer_id属性保存定时器id</span><br><span class="line">    <span class="variable">$connection</span>-&gt;timer_id = Timer::add(<span class="variable">$time_interval</span>, <span class="keyword">function</span>()use(<span class="variable">$connection</span>, <span class="variable">$connect_time</span>)</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="variable">$connection</span>-&gt;send(<span class="variable">$connect_time</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">// 连接关闭时，删除对应连接的定时器</span><br><span class="line"><span class="variable">$ws_worker</span>-&gt;onClose = <span class="keyword">function</span>(<span class="variable">$connection</span>)</span><br><span class="line">&#123;</span><br><span class="line">    // 删除定时器</span><br><span class="line">    Timer::del(<span class="variable">$connection</span>-&gt;timer_id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 运行worker</span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><blockquote><p>更多示例：<a href="http://doc.workerman.net/timer/add.html" target="_blank" rel="noopener">http://doc.workerman.net/timer/add.html</a>  </p></blockquote><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean \Workerman\Lib\Timer::del(int <span class="variable">$timer_id</span>)</span><br></pre></td></tr></table></figure><p>删除某个定时器  </p><p><strong>示例</strong><br>定时器回调中删除当前定时器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">use \Workerman\Worker;</span><br><span class="line">use \Workerman\Lib\Timer;</span><br><span class="line">require_once __DIR__ . <span class="string">'/Workerman/Autoloader.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$task</span> = new Worker();</span><br><span class="line"><span class="variable">$task</span>-&gt;onWorkerStart = <span class="keyword">function</span>(<span class="variable">$task</span>)</span><br><span class="line">&#123;</span><br><span class="line">    // 注意，回调里面使用当前定时器id必须使用引用(&amp;)的方式引入</span><br><span class="line">    <span class="variable">$timer_id</span> = Timer::add(1, <span class="keyword">function</span>()use(&amp;<span class="variable">$timer_id</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        static <span class="variable">$i</span> = 0;</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span>++.<span class="string">"\n"</span>;</span><br><span class="line">        // 运行10次后删除定时器</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span> === 10)</span><br><span class="line">        &#123;</span><br><span class="line">            Timer::del(<span class="variable">$timer_id</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 运行worker</span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><h4 id="定时器注意事项"><a href="#定时器注意事项" class="headerlink" title="定时器注意事项"></a>定时器注意事项</h4><ol><li>只能在<code>onXXXX</code>回调中添加定时器。全局的定时器推荐在onWorkerStart回调中设置，针对某个连接的定时器推荐在onConnect中设置。  </li><li>添加的定时任务在当前进程执行(不会启动新的进程或者线程)，如果任务很重（特别是涉及到网络IO的任务），可能会导致该进程阻塞，暂时无法处理其它业务。所以最好将耗时的任务放到单独的进程运行，例如建立一个/多个Worker进程运行  </li><li>当前进程忙于其它业务时或者当一个任务没有在预期的时间运行完，这时又到了下一个运行周期，则会等待当前任务完成才会运行，这会导致定时器没有按照预期时间间隔运行。也就是说当前进程的业务都是串行执行的，如果是多进程则进程间的任务运行是并行的。  </li><li>多进程设置了定时任务造可能会造成并发问题  </li><li>可能会有1毫秒左右的误差  </li><li>定时器不能跨进程删除，例如a进程设置的定时器无法在b进程直接调用Timer::del接口删除  </li><li>不同进程间的定时器id可能会重复，但是同一个进程内产生的定时器id不会重复  </li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="心跳"><a href="#心跳" class="headerlink" title="心跳"></a>心跳</h3><p>注意：长连接应用必须加心跳，否则连接可能由于长时间未通讯被路由节点强行断开。  </p><p>心跳作用主要有两个：  </p><ol><li>客户端定时给服务端发送点数据，防止连接由于长时间没有通讯而被某些节点的防火墙关闭导致连接断开的情况。  </li><li>服务端可以通过心跳来判断客户端是否在线，如果客户端在规定时间内没有发来任何数据，就认为客户端下线。这样可以检测到客户端由于极端情况(断电、断网等)下线的事件。  </li></ol><p>建议值：<br>建议心跳间隔小于60秒  </p><p><strong>示例</strong><br>自动断开连接<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: pengwenwu</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/23</span></span><br><span class="line"><span class="comment"> * Time: 23:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">'./vendor/autoload.php'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Worker</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Workerman</span>\<span class="title">Lib</span>\<span class="title">Timer</span>;</span><br><span class="line"></span><br><span class="line">$ws_worker = <span class="keyword">new</span> Worker(<span class="string">"websocket://0.0.0.0:9501"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动4个进程对外提供服务</span></span><br><span class="line">$ws_worker-&gt;count = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 心跳间隔25秒</span></span><br><span class="line">define(<span class="string">'HEARTBEAT_TIME'</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">$ws_worker-&gt;onMessage = <span class="function"><span class="keyword">function</span> <span class="params">($connection, $data)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 给connection临时设置一个lastMessageTime属性，用来记录上次收到消息的时间</span></span><br><span class="line">    $connection-&gt;lastMessageTime = time();</span><br><span class="line">    <span class="comment">// 其它业务逻辑...</span></span><br><span class="line">    $connection-&gt;send(<span class="string">'hello'</span> . $data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程启动后设置一个每秒运行一次的定时器</span></span><br><span class="line">$ws_worker-&gt;onWorkerStart = <span class="function"><span class="keyword">function</span> <span class="params">($worker)</span> </span>&#123;</span><br><span class="line">    Timer::add(<span class="number">1</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($worker)</span> </span>&#123;</span><br><span class="line">        $time_now = time();</span><br><span class="line">        <span class="keyword">foreach</span> ($worker-&gt;connections <span class="keyword">as</span> $connection) &#123;</span><br><span class="line">            <span class="comment">// 有可能该connection还没收到过消息，则lastMessageTime设置为当前时间</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">empty</span>($connection-&gt;lastMessageTime)) &#123;</span><br><span class="line">                $connection-&gt;lastMessageTime = $time_now;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 上次通讯时间间隔大于心跳间隔，则认为客户端已经下线，关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> ($time_now - $connection-&gt;lastMessageTime &gt; HEARTBEAT_TIME) &#123;</span><br><span class="line">                $connection-&gt;close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Worker::runAll();</span><br></pre></td></tr></table></figure></p><blockquote><p>更多详细请参考官方手册</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于php不像nodejs、java一样可以常驻内存，没有现成的websock io，需要通过原生的php socket去实现服务端websocket的通信。对于菜鸟而言，还是使用现成的框架更方便，等水平足够了，才需要去考虑这些底层的实现  &lt;/p
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="https://pengwenwu.github.io/tags/php/"/>
    
      <category term="workerman" scheme="https://pengwenwu.github.io/tags/workerman/"/>
    
      <category term="websocket" scheme="https://pengwenwu.github.io/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>WebSocket入门</title>
    <link href="https://pengwenwu.github.io/2018/06/18/WebSocket%E5%85%A5%E9%97%A8/"/>
    <id>https://pengwenwu.github.io/2018/06/18/WebSocket入门/</id>
    <published>2018-06-18T14:21:16.000Z</published>
    <updated>2018-06-18T14:22:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么需要WebSocket？"><a href="#为什么需要WebSocket？" class="headerlink" title="为什么需要WebSocket？"></a>为什么需要WebSocket？</h1><p>虽然有HTTP协议，但是一个很明显的缺点是：所有请求只能有客户端发起，向服务端请求。而服务端有任何状态变化，无法直接通知到客户端。简单处理的方法就是<code>轮询</code>，连续不断发起请求，但是这个非常浪费资源，因为需要不断请求连接。最常见的例子就是聊天室。  </p><h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>优点：</p><ul><li>支持双向通信，实时性更强  </li><li>更好的支持二进制  </li><li>较少的控制开销，数据交换时，数据包请求头较小</li><li>支持更多扩展</li></ul><p>websocket也是通过http请求去建立连接，请求格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET ws://localhost:3000/ws/chat HTTP/1.1</span><br><span class="line">Host: localhost</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Origin: http://localhost:3000</span><br><span class="line">Sec-WebSocket-Key: client-random-string</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure></p><p>跟普通http请求的区别：  </p><ul><li>GET请求的地址不是类似<code>/path/</code>，而是以<code>ws://</code>开头的地址  </li><li>请求头<code>Upgrade: websocket</code>和<code>Connection: Upgrade</code>表示这个连接将要被转换为WebSocket连接  </li><li><code>Sec-WebSocket-Key</code>是用于标识这个连接，并非用于加密数据  </li><li><code>Sec-WebSocket-Version</code>指定了WebSocket的协议版本  </li><li>协议标识符是<code>ws</code>（如果加密，则为<code>wss</code>），服务器网址就是 URL。  </li></ul><p>服务器返回数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: server-random-string</span><br></pre></td></tr></table></figure></p><p>该响应代码<code>101</code>表示本次连接的HTTP协议即将被更改，更改后的协议就是<code>Upgrade: websocket</code>指定的WebSocket协议  </p><p>成功建立连接后，客户端和服务端就可以直接主动发消息给对方。消息传递的格式有两种：文本，二进制数据.通常可以发送JSON数据，方便处理  </p><h2 id="WebSocket对象"><a href="#WebSocket对象" class="headerlink" title="WebSocket对象"></a>WebSocket对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> WebSokcet(url, [protocol])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://echo.websocket.org'</span>, [<span class="string">'myProtocol1'</span>, <span class="string">'myProtocol2'</span>])</span><br></pre></td></tr></table></figure><p>WebSocket 构造函数可接受两个参数，其中，第一个参数必须是以 <code>ws://</code> 或 <code>wss://</code> 开头的完全限定的 URL<br>第二个为非必要参数，用于指定可接受的子协议，有两种可能的类型:  </p><ul><li>String 类型，值为客户端和服务器端均能理解的协议  </li><li>Arrary 类型，包含一组客户端支持的协议（String 类型）  </li></ul><h2 id="WebSocket-属性"><a href="#WebSocket-属性" class="headerlink" title="WebSocket 属性"></a>WebSocket 属性</h2><h3 id="Socket-readyState"><a href="#Socket-readyState" class="headerlink" title="Socket.readyState"></a>Socket.readyState</h3><p>只读属性 <code>readyState</code> 表示连接状态，可以是以下值：</p><ul><li>0 | WebSocket.CONNECTING：表示连接尚未建立  </li><li>1 | WebSocket.OPEN：表示连接已经建立  </li><li>2 | WebSocket.CLOSEING：表示连接正在关闭  </li><li>3 | WebSocket.CLOSED: 表示连接已经关闭或者连接不能打开  </li></ul><h3 id="bufferedAmount"><a href="#bufferedAmount" class="headerlink" title="bufferedAmount"></a>bufferedAmount</h3><p>WebSocket 对象的 <code>bufferedAmount</code> 属性可以用检查已经进入发送队列，但是还未发送到服务器的字节数。可以用来判断发送是否结束    </p><h3 id="protocol"><a href="#protocol" class="headerlink" title="protocol"></a>protocol</h3><p>WebSocket 对象的 <code>protocol</code> 属性值为 WebSocket 打开连接握手期间，服务器端所选择的<code>协议名</code>  </p><p>protocol 属性在最初的握手完成之前为空，如果服务器没有选择客户端提供的某个协议，则该属性保持空值</p><h2 id="WebSockets事件处理"><a href="#WebSockets事件处理" class="headerlink" title="WebSockets事件处理"></a>WebSockets事件处理</h2><p>WebSocket 对象具有以下 4 个事件：  </p><h3 id="open-事件"><a href="#open-事件" class="headerlink" title="open 事件"></a>open 事件</h3><p>当服务器响应了 WebSocket 连接请求，触发<code>open</code>事件并建立一个连接，此时WebSocket已经准备好发送和接收数据，open事件对应的回调函数是<code>onopen()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开启连接'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">ws.addEventListener(<span class="string">'open'</span>, (event) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开启连接'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><h3 id="message事件"><a href="#message事件" class="headerlink" title="message事件"></a>message事件</h3><p><code>message</code>事件在接收到消息是触发，消息内容存储在事件对象<code>event</code>的<code>data</code>中，对应的回调函数是<code>onmessage()</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ws.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.data === <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'接收到的string消息内容为：'</span> + event.data)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'其他类型消息'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了普通文件，WebSocket消息内容还可以是二进制，这种数据作为<code>Blob</code>消息或者<code>ArraryBuffer</code>消息处理。暂不赘述。  </p><h3 id="error事件"><a href="#error事件" class="headerlink" title="error事件"></a>error事件</h3><p><code>error</code>事件在响应意外发生故障时触发，对应的回调函数是<code>onerror()</code>。错误会导致WebSocket连接关闭。  </p><h3 id="close事件"><a href="#close事件" class="headerlink" title="close事件"></a>close事件</h3><p><code>close</code>事件在连接关闭时触发，对应的回调函数是<code>onclose()</code>。一旦连接关闭，客户端和服务器端不在接续接收和发送消息。<br><code>close</code>事件的3个常用属性：  </p><ul><li><code>wasClean</code>：布尔值，表示连接是否被正确关闭。如果是来自服务器的close帧的响应，则为true；如果是因为其他原因关闭，则为false  </li><li><code>code</code>：服务器发送的关闭连接握手状态码  </li><li><code>reason</code>：服务器发送的关闭连接握手状态  </li></ul><h2 id="WebSocket方法"><a href="#WebSocket方法" class="headerlink" title="WebSocket方法"></a>WebSocket方法</h2><p>WebSocket API提供两个方法供调用。</p><h3 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h3><p>使用<code>send()</code>方法可以从客户端向服务端发送消息。前提是必须当WebSocket在客户端和服务端建立全双工双向连接后，才可以调用该方法。所以一般是在<code>open</code>事件触发之后，<code>close</code>触发之前调用<code>send()</code>发送消息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws.onopen = (event) &#123;</span><br><span class="line">    ws.send(<span class="string">'hello websocket'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="close"><a href="#close" class="headerlink" title="close()"></a>close()</h3><p>通过使用<code>close()</code>方法，可以人为的手动关闭WebSocket连接或者终止连接尝试。如果连接已关闭，则该方法什么也不做  </p><p>可以向<code>close()</code>方法传递两个参数：  </p><ul><li><code>code</code>：Number类型，状态代码  </li><li><code>reason</code>: String类型，文本字符串，传递一些关于关闭连接的信息  </li></ul><blockquote><p>参考链接：<br><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">《WebSocket 教程 -  阮一峰》</a><br><a href="https://lfkid.github.io/2016/11/29/WebSocket%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%96%E7%A8%8B/" target="_blank" rel="noopener">《WebSocket客户端编程》</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为什么需要WebSocket？&quot;&gt;&lt;a href=&quot;#为什么需要WebSocket？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要WebSocket？&quot;&gt;&lt;/a&gt;为什么需要WebSocket？&lt;/h1&gt;&lt;p&gt;虽然有HTTP协议，但是一个很明显的
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="WebSocket" scheme="https://pengwenwu.github.io/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>使用laradock配置LNMP环境</title>
    <link href="https://pengwenwu.github.io/2018/06/10/%E4%BD%BF%E7%94%A8laradock%E9%85%8D%E7%BD%AELNMP%E7%8E%AF%E5%A2%83/"/>
    <id>https://pengwenwu.github.io/2018/06/10/使用laradock配置LNMP环境/</id>
    <published>2018-06-10T13:53:22.000Z</published>
    <updated>2018-06-10T14:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>laradock</code>是一个为php配置的完整的docker环境，可以通过修改配置文件，完成对不同版本、不同扩展、不同框架的php docker环境配置。从此对虚拟机说再见  </p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="clone到项目的同级目录"><a href="#clone到项目的同级目录" class="headerlink" title="clone到项目的同级目录"></a>clone到项目的同级目录</h2><p>或者使用<code>Git 子模块</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Laradock/laradock.git laradock</span><br></pre></td></tr></table></figure></p><p>这里使用CodeIgniter框架举个例子，目录结构是这样<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|--- CodeIgniter</span><br><span class="line">|--- laradock</span><br></pre></td></tr></table></figure></p><h2 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h2><p><code>.env</code> 才是配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入laradockm目录</span></span><br><span class="line"><span class="built_in">cd</span> laradock</span><br><span class="line">cp env-example .env</span><br></pre></td></tr></table></figure></p><h2 id="增加配置参数"><a href="#增加配置参数" class="headerlink" title="增加配置参数"></a>增加配置参数</h2><p>如果需要使用mysql，redis等，<code>.env</code>需要新增配置HOST地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .env 末尾新增</span></span><br><span class="line">DB_HOST=mysql</span><br><span class="line">REDIS_HOST=redis</span><br><span class="line">QUEUE_HOST=rabbitmq</span><br></pre></td></tr></table></figure></p><h2 id="修改nginx默认挂在目录"><a href="#修改nginx默认挂在目录" class="headerlink" title="修改nginx默认挂在目录"></a>修改nginx默认挂在目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim laradock/nginx/sites/default.conf</span><br></pre></td></tr></table></figure><p>修改<code>default.conf</code>配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原配置</span></span><br><span class="line"><span class="comment"># root /var/www/public</span></span><br><span class="line">root /var/www/CodeIgniter</span><br></pre></td></tr></table></figure></p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>这里有个坑，由于最近更新了mysql8，而laradoc的mysql中的Dockerfile默认是from latest拉去最新镜像，会导致<strong>mysql无法后台运行</strong>，秒退，应该是旧配置挂载问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d nginx mysql phpmyadmin redis workspace</span><br></pre></td></tr></table></figure></p><p>这里需要重新构建mysql<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build --build-arg MYSQL_VERSION=5.7 mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建完，重启容器</span></span><br><span class="line">docker-compose up -d mysql</span><br></pre></td></tr></table></figure></p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>可以通过<code>docker-compose ps</code>查看各个容器运行状态，以及暴露的端口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">        Name                      Command               State                    Ports</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">laradoc_mysql_1        docker-entrypoint.sh mysqld      Up      0.0.0.0:3306-&gt;3306/tcp</span><br><span class="line">laradoc_nginx_1        nginx                            Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class="line">laradoc_php-fpm_1      docker-php-entrypoint php-fpm    Up      9000/tcp</span><br><span class="line">laradoc_phpmyadmin_1   /run.sh phpmyadmin               Up      0.0.0.0:8080-&gt;80/tcp, 9000/tcp</span><br><span class="line">laradoc_redis_1        docker-entrypoint.sh redis ...   Up      0.0.0.0:6379-&gt;6379/tcp</span><br><span class="line">laradoc_workspace_1    /sbin/my_init                    Up      0.0.0.0:2222-&gt;22/tcp</span><br></pre></td></tr></table></figure></p><p>这里看到，nginx默认80端口，打开浏览器，输入localhost即可访问，正常返回的是CI框架的默认首页  </p><blockquote><p>Welcome to CodeIgniter!  </p></blockquote><p>phpmyadmin的端口是8080，浏览器输入localhost:8080，则可以访问phpmyadmin。服务器地址是之前配置的 DB_HOST = <code>mysql</code>，账号密码可以查看<code>.env</code>配置文件，默认是<code>root</code> <code>root</code>，这些都是可以在启动命令的参数里设置</p><p>参考链接：<a href="http://laradock.io/" target="_blank" rel="noopener">《Laradock》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;&lt;code&gt;laradock&lt;/code&gt;是一个为php配置的完整的docker环境，可以通过修改配置文件，完成对不同版本、不同扩展、不同框
      
    
    </summary>
    
      <category term="Docker" scheme="https://pengwenwu.github.io/categories/Docker/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="Docker" scheme="https://pengwenwu.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>git子模块</title>
    <link href="https://pengwenwu.github.io/2018/06/10/git%E5%AD%90%E6%A8%A1%E5%9D%97/"/>
    <id>https://pengwenwu.github.io/2018/06/10/git子模块/</id>
    <published>2018-06-10T04:53:12.000Z</published>
    <updated>2018-06-10T05:03:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h1><p>文档：<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">Git 工具 - 子模块</a>  </p><blockquote><p>在一个项目中要引入另外一个项目，比如我在当前项目里，想要引入laradock docker环境，需要怎么操作？难道需要copy一份代码过来？怎么保证同步更新？  </p></blockquote><h2 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h2><p>在当前项目中执行<code>git submodule add</code>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add https://github.com/Laradock/laradock.git laradock</span><br></pre></td></tr></table></figure></p><p>此时，会在当前项目下新建一个<code>laradock</code>项目，执行<code>git status</code>会看到下面两项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up to date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">        new file:   .gitmodules</span><br><span class="line">        new file:   laradock</span><br></pre></td></tr></table></figure></p><p><code>.gitmodules</code>是一个配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cat .gitmodules</span><br><span class="line">[submodule <span class="string">"laradock"</span>]</span><br><span class="line">        path = laradock</span><br><span class="line">        url = https://github.com/Laradock/laradock.git</span><br></pre></td></tr></table></figure></p><p>如果此时，同时修改原项目文件，以及子项目文件，执行<code>git diff</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ git diff</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index e02af03..a6a0276 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1,2 +1,4 @@</span><br><span class="line"> <span class="comment"># bbs</span></span><br><span class="line"> 基于CodeIgniter框架开发的bbs系统</span><br><span class="line">+</span><br><span class="line">+&gt; 新增laradock项目引入</span><br><span class="line">diff --git a/laradock b/laradock</span><br><span class="line">--- a/laradock</span><br><span class="line">+++ b/laradock</span><br><span class="line">@@ -1 +1 @@</span><br><span class="line">-Subproject commit 66c61d9a72ea52ab04ddb1999b0998f7ba10a0e4</span><br><span class="line">+Subproject commit 66c61d9a72ea52ab04ddb1999b0998f7ba10a0e4-dirty</span><br></pre></td></tr></table></figure></p><h2 id="修改submodule"><a href="#修改submodule" class="headerlink" title="修改submodule"></a>修改submodule</h2><p>需要进入到对应的子项目目录去修改,提交完毕之后，回到父级项目提交。</p><h2 id="新clone-submodule项目"><a href="#新clone-submodule项目" class="headerlink" title="新clone submodule项目"></a>新clone submodule项目</h2><p>先clone父级项目，然后进入子项目，发现时空文件夹，需要依次执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在子项目目录</span></span><br><span class="line">git submodule init  </span><br><span class="line"></span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure></p><h2 id="删除submodule"><a href="#删除submodule" class="headerlink" title="删除submodule"></a>删除submodule</h2><p>git 并不支持<code>直接删除</code>Submodule, 需要手动删除对应的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入父级项目</span></span><br><span class="line">git rm --cached pod-library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子项目</span></span><br><span class="line">rm -rf pod-library</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子项目配置文件</span></span><br><span class="line">rm .gitmodules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改git的配置文件config:</span></span><br><span class="line">vim .git/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除父级项目git配置中的子项目配置</span></span><br><span class="line">[submodule <span class="string">"pod-library"</span>]</span><br><span class="line">  url = git@github.com:jjz/pod-library.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 完成新的提交</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<a href="https://segmentfault.com/a/1190000003076028" target="_blank" rel="noopener">使用Git Submodule管理子模块</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;子模块&quot;&gt;&lt;a href=&quot;#子模块&quot; class=&quot;headerlink&quot; title=&quot;子模块&quot;&gt;&lt;/a&gt;子模块&lt;/h1&gt;&lt;p&gt;文档：&lt;a href=&quot;https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-
      
    
    </summary>
    
      <category term="Git" scheme="https://pengwenwu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://pengwenwu.github.io/tags/Git/"/>
    
  </entry>
  
</feed>
