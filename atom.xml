<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pena&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://pengwenwu.github.io/"/>
  <updated>2018-05-13T08:36:56.016Z</updated>
  <id>https://pengwenwu.github.io/</id>
  
  <author>
    <name>pengwenwu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>array_map, array_walk, array_filter的区别及使用</title>
    <link href="https://pengwenwu.github.io/2018/05/13/array-map-array-walk-array-filter%E7%9A%84%E5%8C%BA%E5%88%AB%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://pengwenwu.github.io/2018/05/13/array-map-array-walk-array-filter的区别及使用/</id>
    <published>2018-05-13T08:33:22.000Z</published>
    <updated>2018-05-13T08:36:56.016Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>array_map, array_walk, array_filter的区别及使用<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// array_map, array_walk, array_filter的区别</span></span><br><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $value * $value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $value &gt; <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">walk</span><span class="params">(&amp;$value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $value = $value * $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array_map 会返回新的数组, 不对原数组产生影响</span></span><br><span class="line">$new_arr = array_map(<span class="string">'foo'</span>, $arr);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'原数组:'</span>.var_export($arr, <span class="number">1</span>).<span class="string">"\n"</span>, <span class="string">'array_map修改后的数组：'</span>.var_export($new_arr, <span class="number">1</span>).<span class="string">"\n"</span>.<span class="string">"&lt;hr/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array_walk 返回bool值，callback需要通过值传递改变原有数组</span></span><br><span class="line">$res = array_walk($arr, <span class="string">'walk'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'修改后的数组:'</span>.var_export($arr, <span class="number">1</span>).<span class="string">"\n"</span>, <span class="string">'array_walk返回结果：'</span>.var_export($res, <span class="number">1</span>).<span class="string">"\n"</span>.<span class="string">"&lt;hr/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// array_filter 返回筛选后的新数组，不对原数组产生影响</span></span><br><span class="line">$new_arr = array_filter($arr, <span class="string">'filter'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'原数组:'</span>.var_export($arr, <span class="number">1</span>).<span class="string">"\n"</span>, <span class="string">'array_filter返回结果：'</span>.var_export($new_arr, <span class="number">1</span>).<span class="string">"\n"</span>.<span class="string">"&lt;hr/&gt;"</span>;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;array_map, array_walk, array_filter的区别及使用&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="PHP" scheme="https://pengwenwu.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>windows下cmd/powershell中文乱码解决方法</title>
    <link href="https://pengwenwu.github.io/2018/05/13/windows%E4%B8%8Bcmd-powershell%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://pengwenwu.github.io/2018/05/13/windows下cmd-powershell中文乱码解决方法/</id>
    <published>2018-05-13T08:09:01.000Z</published>
    <updated>2018-05-13T08:13:21.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>windows下cmd或者powershell运行php文件中文乱码  </p></blockquote><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>执行下面的命令，切换成utf-8编码</p><pre><code>chcp 65001</code></pre><p>这个指标不治本，查了说是可以修改注册表，但是好像又会带来其他的坑（中文软件乱码、nodejs乱码），未测试过，不予评价。参考链接：<a href="https://www.zhihu.com/question/54724102" target="_blank" rel="noopener">https://www.zhihu.com/question/54724102</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;windows下cmd或者powershell运行php文件中文乱码  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方
      
    
    </summary>
    
      <category term="环境配置" scheme="https://pengwenwu.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="中文乱码" scheme="https://pengwenwu.github.io/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用命令</title>
    <link href="https://pengwenwu.github.io/2018/05/13/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://pengwenwu.github.io/2018/05/13/hexo常用命令/</id>
    <published>2018-05-13T06:21:59.000Z</published>
    <updated>2018-05-13T08:36:27.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>hexo常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo n &quot;博客名称&quot;  =&gt; hexo new &quot;博客名称&quot; </span><br><span class="line">hexo g  =&gt; hexo generate  #生成</span><br><span class="line">hexo p  =&gt; hexo publish # 发布</span><br><span class="line">hexo s  =&gt; hexo server  #启动服务预览</span><br><span class="line">hexo d  =&gt; hexo deploy  #部署</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;hexo常用命令&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="Git" scheme="https://pengwenwu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://pengwenwu.github.io/tags/Git/"/>
    
      <category term="hexo" scheme="https://pengwenwu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git reset 和 revert 的区别和使用</title>
    <link href="https://pengwenwu.github.io/2018/05/13/git-reset-%E5%92%8C-revert-%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://pengwenwu.github.io/2018/05/13/git-reset-和-revert-的区别和使用/</id>
    <published>2018-05-13T06:17:37.000Z</published>
    <updated>2018-05-13T06:22:41.234Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>git <code>revert</code> 撤销某次提交, 保留之前的commit, 同时创建一个新的commit(可用于<strong>公共分支</strong>)<br>git <code>reset</code> 撤销某个提交， 删除之前的commit, head回退 (多用于<strong>私有分支</strong>)<br><strong>区别</strong>: git revert 只是撤销某个commit, 保留该commit之前的提交结果</p></blockquote><h3 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h3><blockquote><p>commit3: add log3<br>commit2: add log2<br>commit1: add log1</p></blockquote><h3 id="HEAD用法"><a href="#HEAD用法" class="headerlink" title="HEAD用法"></a>HEAD用法</h3><ul><li>HEAD^: 指向上一次commit</li><li>HEAD~100: 指向前第一百个commit</li><li>HEAD commit_id: 直接指向某个commit  </li></ul><h3 id="–soft、–mixed-默认-、–hard的区别"><a href="#–soft、–mixed-默认-、–hard的区别" class="headerlink" title="–soft、–mixed(默认)、–hard的区别"></a>–soft、–mixed(默认)、–hard的区别</h3><ul><li>–soft: 只是重置HEAD到某一个commit, 其余不会有任何变化(缓存区和工作目录都不会被改变)</li><li>–mixed(默认): 重置HEAD, 文件修改都将保存到缓存区(缓存区和你指定的提交同步，但工作目录不受影响)</li><li>–hard: 修改当前所有内容, 所有本地修改都将丢失(缓存区和工作目录都同步到你指定的提交). 找回执行命令: git reflow</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;git &lt;code&gt;revert&lt;/code&gt; 撤销某次提交, 保留之前的commit, 同时创建一个新的commit(可用于&lt;strong&gt;公共分支&lt;/strong&gt;)&lt;br&gt;git &lt;code&gt;reset&lt;/code&gt; 撤销某个提交， 删除之前
      
    
    </summary>
    
      <category term="Git" scheme="https://pengwenwu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://pengwenwu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git pull更新指定文件</title>
    <link href="https://pengwenwu.github.io/2018/05/13/git-pull%E6%9B%B4%E6%96%B0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
    <id>https://pengwenwu.github.io/2018/05/13/git-pull更新指定文件/</id>
    <published>2018-05-13T06:07:42.000Z</published>
    <updated>2018-05-13T06:17:02.552Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>经常会遇到，几个文件一起提交了，但是某些文件是要先执行的，不然一起pull下来会加载报错</p><h3 id="更新git指定文件"><a href="#更新git指定文件" class="headerlink" title="更新git指定文件"></a>更新git指定文件</h3><p>git fetch<br>git checkout origin/master – path/to/file</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;经常会遇到，几个文件一起提交了，但是某些文件是要先执行的，不然一起pull下来会加载报错&lt;/p&gt;
&lt;h3 id=&quot;更新git指定文件&quot;&gt;&lt;a href=&quot;#更新git指定文件&quot; class=&quot;headerlink&quot; title=&quot;更新git指定文件
      
    
    </summary>
    
      <category term="Git" scheme="https://pengwenwu.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://pengwenwu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>阅读《微服务设计》笔记</title>
    <link href="https://pengwenwu.github.io/2018/03/03/%E9%98%85%E8%AF%BB%E3%80%8A%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>https://pengwenwu.github.io/2018/03/03/阅读《微服务设计》笔记/</id>
    <published>2018-03-03T10:14:59.000Z</published>
    <updated>2018-03-05T15:09:30.328Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录阅读《微服务设计》收获的点  </p></blockquote><h2 id="什么是微服务？"><a href="#什么是微服务？" class="headerlink" title="什么是微服务？"></a>什么是微服务？</h2><p><strong>一些协同工作的小而自治的服务</strong></p><h2 id="打破外键关系"><a href="#打破外键关系" class="headerlink" title="打破外键关系"></a>打破外键关系</h2><p><strong>对于有外键关系的表如何做服务拆分？</strong><br>通过api调用访问  </p><ul><li>优点：数据表拆分，进而服务拆分</li><li>缺点：增加了数据库的调用，会影响性能。需要测试是否在可接受范围内，权衡拆分服务带来的好处</li></ul><h2 id="共享表拆分"><a href="#共享表拆分" class="headerlink" title="共享表拆分"></a>共享表拆分</h2><p><strong>共享表拆分后，如何保证插入数据的一致性？</strong><br>设计之初为了减少数据库的调用，必然会建立基于外键的共享表。拆分之后，如何保证同时插入多张表数据的一致性？（某张表插入失败）  </p><ul><li>通过<code>事务</code>处理  </li><li>推荐对及时性较弱的操作，异常捕获后放入队列或者日志文件中进行延迟处理，保证<code>最终一致性</code>  </li><li>终止整个操作，再发起<code>补偿事务</code>来抵消之前的操作（自动化处理）</li><li><p><code>分布式事务</code>。通过专门的事务管理器工具来协调底层事务（不推荐，易出错，难扩展）</p><blockquote><p>阅读完感觉云里雾里，可能是自己的水平还没到达那个深度。收获大概是：了解了后端的架构，后期拓展可能会遇到的问题，以及解决这样问题的思路。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录阅读《微服务设计》收获的点  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是微服务？&quot;&gt;&lt;a href=&quot;#什么是微服务？&quot; class=&quot;headerlink&quot; title=&quot;什么是微服务？&quot;&gt;&lt;/a&gt;什么是微服务？&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="后端" scheme="https://pengwenwu.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="微服务" scheme="https://pengwenwu.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://pengwenwu.github.io/2018/01/21/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://pengwenwu.github.io/2018/01/21/Linux常用命令/</id>
    <published>2018-01-21T13:27:15.000Z</published>
    <updated>2018-03-05T15:19:56.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录一些阅读《鸟哥的Linux私房菜-基础学习篇》中不太熟悉的命令  </p></blockquote><h3 id="软连接、硬链接"><a href="#软连接、硬链接" class="headerlink" title="软连接、硬链接"></a>软连接、硬链接</h3><blockquote><p><strong>软连接</strong>：连接文件的内容只会写上目标文件的“文件名”，实际是通过记录的目标文件地址去访问实际存储内容。大小就是文件名大小。如果删除目标文件，则当前文件无法访问。(等同于windows的快捷方式)  </p><p> <strong>硬连接</strong>：只能针对单个文件，实际会创建一个一模一样的“文件”(权限、大小)，连接数增加。连接到同一个地址，只是使用了不同的文件名，均可以对源文件进行数据修改，删除任意一个，不影响其余文件访问</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cp -s test test1  </span><br><span class="line">ln -s test test1  # 软连接(快捷方式)</span><br><span class="line"></span><br><span class="line">cp -l demo.php demo1.php </span><br><span class="line">ln -l demo.php demo1.php # 硬链接(只支持单个文件)</span><br></pre></td></tr></table></figure><h3 id="查看分区"><a href="#查看分区" class="headerlink" title="查看分区"></a>查看分区</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#-z gzip压缩，-j bzip2压缩</span><br><span class="line">tar -zcvf [newfilename] filename </span><br><span class="line">tar -zxvf filename.tar.gz [-C 目录] 解压要到指定目录</span><br></pre></td></tr></table></figure><h3 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type name</span><br></pre></td></tr></table></figure><h3 id="命名别名"><a href="#命名别名" class="headerlink" title="命名别名"></a>命名别名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias rm=&apos;rm -i&apos;</span><br><span class="line">alias st=&apos;status&apos;</span><br><span class="line"></span><br><span class="line">unalias rm  #取消别名</span><br></pre></td></tr></table></figure><h3 id="数据流重定向"><a href="#数据流重定向" class="headerlink" title="数据流重定向"></a>数据流重定向</h3><blockquote><p>标准输入：&lt;或&lt;&lt; (将由键盘输入的数据由文件代替/<strong>结束输入</strong>)<br>标准输出：&gt;或&gt;&gt; (覆盖/追加)<br>标准错误输出：2&gt;或2&gt;&gt; (覆盖/追加)  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; catfile &lt;&lt; eof</span><br><span class="line">&gt;This is a test.</span><br><span class="line">&gt;Ok now stop</span><br><span class="line">&gt;eof</span><br></pre></td></tr></table></figure><h3 id="命令执行判断：-amp-amp"><a href="#命令执行判断：-amp-amp" class="headerlink" title="命令执行判断：; || &amp;&amp;"></a>命令执行判断：; || &amp;&amp;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#依次执行</span><br><span class="line">echo 1; echo 2; echo 3 </span><br><span class="line"></span><br><span class="line">#若cmd1正确执行，则开始执行cmd2</span><br><span class="line">#若cmd1执行错误，则cmd2不执行</span><br><span class="line">cmd1 &amp;&amp; cmd2   </span><br><span class="line">               </span><br><span class="line">#若cmd1正确执行，则不执行cmd2</span><br><span class="line">#若cmd1执行错误，则开始执行cmd2</span><br><span class="line">cmd1 || cmd2</span><br></pre></td></tr></table></figure><h3 id="选取命令：cut-grep"><a href="#选取命令：cut-grep" class="headerlink" title="选取命令：cut, grep"></a>选取命令：cut, grep</h3><blockquote><p>cut:<br>  -d：分割字符，与-f一起用<br>  -f：取出第几段<br>  -c：取出固定字符区间  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 列出第三段，第五段</span><br><span class="line">echo $PATH | cut -d &apos;:&apos; -f 3,5 </span><br><span class="line"></span><br><span class="line"># 取得第5字符之后</span><br><span class="line">echo $PATH | cut -c 5-</span><br></pre></td></tr></table></figure><h3 id="排序命令-sort-wc-uniq"><a href="#排序命令-sort-wc-uniq" class="headerlink" title="排序命令:sort, wc, uniq"></a>排序命令:sort, wc, uniq</h3><blockquote><p>sort [-fbMnrtuk]<br>uniq [-ic]<br>-c：进行计数  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 每个人登录的次数</span><br><span class="line">last | cut -d &apos; &apos; -f 1 | sort | uniq -c</span><br></pre></td></tr></table></figure><blockquote><p>wc [-lwm]<br>-l：仅列出行<br>-w：仅列出多少字<br>-m：多少字符</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录一些阅读《鸟哥的Linux私房菜-基础学习篇》中不太熟悉的命令  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;软连接、硬链接&quot;&gt;&lt;a href=&quot;#软连接、硬链接&quot; class=&quot;headerlink&quot; title=&quot;软连接、硬链接&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://pengwenwu.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://pengwenwu.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github搭建个人博客教程</title>
    <link href="https://pengwenwu.github.io/2018/01/14/hexo%20+%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>https://pengwenwu.github.io/2018/01/14/hexo + github搭建个人博客教程/</id>
    <published>2018-01-14T08:09:07.000Z</published>
    <updated>2018-01-21T13:33:34.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一年前，临近毕业。为了准备面试，才刻意去准备了<code>github</code>以及<code>blog</code>。<br>自从找到工作后，这两个基本没怎么维护过，想想未免太功利了点。</p><p>主要是前几天，又踩到坑了，想去找以前的记录，很麻烦。<br>之前虽然每天都会写工作总结，一些踩过的坑记在为知笔记上，没有<code>分类</code>、<code>标签</code>，后面再想去找很困难。<br>痛定思痛，该记的东西少不掉，索性优雅一点。</p><p>之前用的是博客园，但是那个账号密码老记不住，干脆自己搭建一个吧，好歹也是一个码农。<br>然后花了两个晚上加一个上午，通过<code>hexo</code>和<code>github</code>搭建了一个个人博客。<br>网上教程、文档那么多，为什么花这么久时间？当然是踩坑了啊。<br>所以下面会记录一些遇到的问题和坑。<br>如果你看完这边文章，那你只需要<code>两个小时</code>就能搭建成功。欢迎有兴趣的小伙伴尝试一下。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><strong>node.js</strong></li><li><strong>git</strong></li></ol><p>这两个应用windows用户直接搜索下载安装就可以。<br>如果习惯了使用linux命令的朋友，推荐windows神器<code>cmder</code>。<br>可以直接在windows环境下使用linux命令，样式可调，再也不要用黑乎乎的cmd了，而且自带git，完全可以不用下载windows git。</p><h3 id="正式安装hexo"><a href="#正式安装hexo" class="headerlink" title="正式安装hexo"></a>正式安装hexo</h3><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方中文文档</a></p><p>在node.js安装好的前提下，全局安装hexo<br>如何判断node.js是否安装成功？执行以下命令，如果能够看到版本号则说明安装成功了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>安装<code>hexo</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>自选合适的目录，新建文件夹&lt;folder&gt;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>不再赘述，直接看官方文档。</p><h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><p>新建仓库，仓库名必须为<strong>[your_name.github.io]</strong></p><blockquote><p>补充：本地配置github ssh连接，方便自动部署，以及clone你喜欢的主题(theme)</p></blockquote><p>windows用户直接在<code>c:/用户/youername/.ssh/</code>下查看是否有<code>id_rsa.pub</code>文件。<br>没有的话命令行执行命令<code>ssh-keygen -t rsa -C &quot;your eamil&quot;</code>，会自动生成<code>id_rsa.pub</code>文件，打开后复制。</p><p>github-&gt;头像-&gt;Settings→SSH kyes→Add SSH key，粘贴复制的内容。</p><p>配置本地账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “your_username”  #设置用户名</span><br><span class="line">git config --global user.email “your_email”  #设置邮箱地址,最好使用注册邮箱地址</span><br></pre></td></tr></table></figure></p><p>测试是否配置成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><h3 id="hexo配置以及使用"><a href="#hexo配置以及使用" class="headerlink" title="hexo配置以及使用"></a>hexo配置以及使用</h3><p>有两个配置文件：</p><ul><li>一个是根目录下的<code>_config.yml</code>称为<code>站点配置</code>文件</li><li>一个是<code>themes/landscape/_config.yml</code>称为<code>主题配置</code>文件(默认主题：landscape)</li></ul><p>站点配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url: https://yourname.github.io/</span><br><span class="line">theme: landscape #选择你想用的主题，我用的是indigo</span><br><span class="line">deploy:</span><br><span class="line">    type: git   # 不要使用github</span><br><span class="line">    repo: git@github.com:pengwenwu/pengwenwu.github.io.git # 使用ssh连接</span><br><span class="line">    branch: master  # 默认master分支</span><br><span class="line">    message: add new blog # 自动部署commit备注，可不填</span><br></pre></td></tr></table></figure><h4 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h4><p><a href="https://segmentfault.com/a/1190000002632530" target="_blank" rel="noopener">hexo命令参考</a></p><p><code>hexo n &quot;我的博客&quot;</code> == <code>hexo new &quot;我的博客&quot;</code> #新建文章<br><code>hexo p</code> == <code>hexo publish</code><br><code>hexo g</code> == <code>hexo generate</code> #生成<br><code>hexo s</code> == <code>hexo server</code> #启动服务本地预览<br><code>hexo d</code> == <code>hexo deploy</code> #部署<br><code>hexo clean</code> #清除缓存 网页正常情况下可以忽略此条命令  </p><p><code>hexo server</code> #Hexo 会监视文件变动并自动更新，您无须重启服务器。<br><code>hexo server -s</code> #静态模式<br><code>hexo server -p 5000</code> #更改端口<br><code>hexo server -i 192.168.1.1</code> #自定义 IP</p><p>在执行之前，记得安装自动部署  (–save 加不加的区别在于是否写入到依赖文件package.json中)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>正常本地预览，直接执行<code>hexo s</code>,如果要发布话最好执行<code>clean</code>命令，会去删除生成的public文件，完整部署命令:<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>。或者直接<code>hexo d -g</code></p><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><p>安装完自动部署后，是不需要本地git init新建仓库的。执行<code>hexo g</code>会在根目录生成public文件夹，自动部署，<br>本质是将public文件夹内容全部提交到仓库中去，默认会访问编译好的index.html。</p><p>如果部署完，访问your_name.github.io 404,可能有下面几个原因</p><ol><li>首先检查仓库文件，是不是全都是public的文件内容，如果整个本地blog文件夹都提交了，首先清空<br>仓库，然后删除本地<code>.deploy_git</code>文件夹，再重新部署</li><li>文件有报错，本地<code>hexo s</code>观察是否有报错。</li></ol><p>不喜欢原主题的朋友，可以github去找喜欢的主题。执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone XXXX.next.git themes\next</span><br></pre></td></tr></table></figure></p><p>这个会将新的主题下载到themes下对应的next目录，next为主题的名字。</p><p>主题的配置，可以看文档，修改对应的<code>主题配置</code>文件。<br>我使用的主题是<code>indigo</code>,详细文档<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a></p><p><code>markdown</code>不会使用的朋友，参考链接<a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">markdown中文文档</a><br>如果没有ide的话，可以使用在线预览<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">Cmd Markdown</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一年前，临近毕业。为了准备面试，才刻意去准备了&lt;code&gt;github&lt;/code&gt;以及&lt;code&gt;blog&lt;/code&gt;。&lt;br&gt;自从找到
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://pengwenwu.github.io/tags/hexo/"/>
    
      <category term="github" scheme="https://pengwenwu.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>如何将一个数组乱序？</title>
    <link href="https://pengwenwu.github.io/2018/01/13/%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E4%B9%B1%E5%BA%8F%EF%BC%9F/"/>
    <id>https://pengwenwu.github.io/2018/01/13/如何将一个数组乱序？/</id>
    <published>2018-01-13T13:55:11.000Z</published>
    <updated>2018-01-14T08:13:34.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是很久以前博客园的博客，打个小样。</p></blockquote><p>前几天php实习面试，问到一个问题：<strong>如何将一个数组乱序？</strong><br>答：使用自带的array_rand()或者shuffle()函数，或者用随机数取值赋值给新的数组。<br>又问：万一一直随机到同一个数怎么办？<br>那就进行判断，如果已经取过的位置，重新选取随机数。<br>这样问题就来了：随着新数组长度增加，原数组中的随机数选取碰撞几率会原来越大，最后几乎是一直碰撞的。也没有想出更好的办法。</p><p>后来回家后查了一下，总结一下，有以下几种方法：</p><ol><li><p>使用自带的函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle_rand1</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"原来数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">shuffle($arr);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;乱序数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第一时间想到的方法，就是随机取值，赋值给新的数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle_rand2</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"原来数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">$len = count($arr);</span><br><span class="line">$shuffle_arr = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span>(count($shuffle_arr)&lt;$len)&#123;</span><br><span class="line">$index = rand(<span class="number">0</span>,$len<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(!in_array($index, $shuffle_arr))&#123;</span><br><span class="line">$shuffle_arr[] = $index;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$newarr = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">foreach</span> ($shuffle_arr <span class="keyword">as</span> $v) &#123;</span><br><span class="line">$newarr[] = $arr[$v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;新的数组为："</span>;</span><br><span class="line">print_r($newarr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组中随机取一个元素赋值给新的数组，然后将原数组最后一位赋值到该位置,数组长度减一，继续重复上述步奏</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle_rand3</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"原来数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">$len = count($arr);</span><br><span class="line">$shuffle_arr = <span class="keyword">array</span>();</span><br><span class="line"><span class="keyword">while</span>($len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">$index = rand(<span class="number">0</span>,$len<span class="number">-1</span>);</span><br><span class="line">$shuffle_arr[] = $arr[$index];</span><br><span class="line">$arr[$index] = $arr[$len<span class="number">-1</span>];</span><br><span class="line">$len--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;新的数组为："</span>;</span><br><span class="line">print_r($shuffle_arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在具有n个元素的数组中，对0到n-1一次进行与一个随机位置元素进行交换,这种方法不需要新建一个数组，直接在原数组中进行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shuffle_rand4</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"原来数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">$len = count($arr);</span><br><span class="line"><span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;$len;$i++)&#123;</span><br><span class="line">$index = rand(<span class="number">0</span>,$len<span class="number">-1</span>);</span><br><span class="line">$temp = $arr[$i];</span><br><span class="line">$arr[$i] = $arr[$index];</span><br><span class="line">$arr[$index] = $temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;新的数组为："</span>;</span><br><span class="line">print_r($arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是很久以前博客园的博客，打个小样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前几天php实习面试，问到一个问题：&lt;strong&gt;如何将一个数组乱序？&lt;/strong&gt;&lt;br&gt;答：使用自带的array_rand()或者shuffle()函数，或者
      
    
    </summary>
    
      <category term="算法" scheme="https://pengwenwu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="PHP" scheme="https://pengwenwu.github.io/tags/PHP/"/>
    
      <category term="算法" scheme="https://pengwenwu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://pengwenwu.github.io/2018/01/10/hello-world/"/>
    <id>https://pengwenwu.github.io/2018/01/10/hello-world/</id>
    <published>2018-01-10T15:18:30.173Z</published>
    <updated>2018-01-10T15:18:30.173Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
